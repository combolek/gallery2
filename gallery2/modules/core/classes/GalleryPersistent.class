<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * A class that contains information about the state of its members
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryPersistent {

    /**
     * Keep track of which internal values are persistant and which ones aren't
     * so that we'll know when and what to save to the database.
     *
     * @var array $_persistentStatus
     * @access private
     */
    var $_persistentStatus;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     */
    function GalleryPersistent() {
	/*
	 * Initialize our persistent info tracker
	 */
	$this->_persistentStatus['flags'] = 0;
	$this->_persistentStatus['originalValue'] = array();
    }

    /**
     * Have we modified any data in this class?
     *
     * @return array object GalleryStatus a status code
     *               bool true if modified, false if not.
     */
    function isModified($member=null) {
	if ($member) {
	    $existsInThis = array_key_exists($member, $this);
	    if (array_key_exists($member, $this->_persistentStatus['originalValue']) !=
		    $existsInThis) {
		return array(null, true);
	    } else {
		$isModified = $existsInThis &&
		    $this->_persistentStatus['originalValue'][$member] !== $this->$member;
		return array(null, $isModified);
	    }
	} else {
	    global $gallery;
	    $storage =& $gallery->getStorage();
	    list ($ret, $data) = $storage->describeEntity($this->entityType);
	    if ($ret) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    $target = $this->entityType;
	    while ($target) {
		foreach (array_keys($data[$target]['members']) as $key) {
		    $existsInThis = array_key_exists($key, $this);
		    if (array_key_exists($key, $this->_persistentStatus['originalValue']) !=
			    $existsInThis) {
			return array(null, true);
		    }
		    if ($existsInThis &&
			    $this->_persistentStatus['originalValue'][$key] != $this->$key) {
			return array(null, true);
		    }
		}
		$target = $data[$target]['parent'];
	    }
	    return array(null, false);
	}
    }

    /**
     * Return the original value of the given member.
     * @return mixed the value, or null if it was not defined.
     */
    function getOriginalValue($member) {
	if (!isset($this->_persistentStatus['originalValue'][$member])) {
	    return null;
	}
	return $this->_persistentStatus['originalValue'][$member];
    }

    /**
     * Reset all modification flags
     * @return object GalleryStatus a status code
     */
    function clearModifiedFlags() {
	global $gallery;
	$storage =& $gallery->getStorage();
	list ($ret, $data) = $storage->describeEntity($this->entityType);
	if ($ret) {
	    return null;
	}

	$this->_persistentStatus['originalValue'] = array();
	$target = $this->entityType;
	while ($target) {
	    foreach (array_keys($data[$target]['members']) as $member) {
		$this->_persistentStatus['originalValue'][$member] =
		    isset($this->$member) ? $this->$member : null;
	    }
	    $target = $data[$target]['parent'];
	}

	return null;
    }

    /**
     * Set a flag
     *
     * The GalleryStorage strategy uses this to flag objects for its own
     * internal purposes.
     *
     * @param string a bit flag to set
     */
    function setPersistentFlag($flag) {
	$this->_persistentStatus['flags'] |= $flag;
    }

    /**
     * Clear a flag
     *
     * The GalleryStorage strategy uses this to flag objects for its own
     * internal purposes.
     *
     * @param string a bit flag to clear
     */
    function clearPersistentFlag($flag) {
	$this->_persistentStatus['flags'] &= ~$flag;
    }

    /**
     * Test a flag
     *
     * The GalleryStorage strategy uses this to flag objects for its own
     * internal purposes.
     *
     * @param string a bit flag to test
     * @return bool true if the bit is on, false otherwise
     */
    function testPersistentFlag($flag) {
	return $this->_persistentStatus['flags'] & $flag;
    }

    /**
     * Return the relative path to the class for this entity
     *
     * @return array object GalleryStatus a status code
     *               string a path like modules/core/classes/GalleryUser.class
     */
    function getClassFile() {
	global $gallery;
	$storage =& $gallery->getStorage();
	list ($ret, $data) = $storage->describeEntity($this->entityType);
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(
	    null, "modules/{$data[$this->entityType]['module']}/classes/{$this->entityType}.class");
    }
}
?>
