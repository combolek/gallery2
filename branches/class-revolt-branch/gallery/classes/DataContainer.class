<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * A container for a data source that Gallery manages.
 *
 * A container for any data that Gallery can manage.  Known
 * implementations include ImageContainer, MovieContainer or
 * UnknownContainer.
 * 
 * @gallery metainfo 1.0
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class DataContainer extends GalleryNucleus {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The name of the file that contains the actual media data.
     * This, when combined with the parent's path forms the
     * complete path to the file.
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_MEDIUM
     *
     * @var string $_dataFileName
     */
    var $_dataFileName;

    /**
     * Is this object derived from another one?  (eg, thumbnails
     * and resized images)
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_BOOLEAN
     *
     * @var bool $_isDerivative
     */
    var $_isDerivative;

    /**
     * What's the source of this derivative?  The source must be
     * the id of another DataContainer.
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     *
     * @var int $_derivativeSource
     */
    var $_derivativeSource;

    /**
     * A sequence of commands used to derive this data from the original
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_LARGE
     *
     * @var int $_derivativeCommands
     */
    var $_derivativeCommands;

    /**
     * The ids of DataContainers that are derived from this one.
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_MAP
     * @gallery flag STORAGE_TYPE_INTEGER
     *
     * @var object GalleryList $_derivativeChildren
     */
    var $_derivativeChildren;

    /**
     * Track whether the cache is current or expired
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_BOOLEAN
     *
     * @var boolean $_cacheIsCurrent
     */
    var $_cacheIsCurrent;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     *
     * Create a new blank instance, and register any members that need to
     * persist in our storage.
     *
     * @access public
     */
    function DataContainer() {
	$this->GalleryNucleus();
    }

    /**
     * Create a new instance of this type in the persistent store.
     *
     * Record the name of the data file that we will be containing.
     *
     * @access public
     * @param string the path to a data file to be contained
     */
    function create($dataFileName) {
	if (empty($dataFileName)) {
	    return ERROR | ERROR_BAD_PARAMETER;
	}

	$ret = parent::create();
	if ($ret == SUCCESS) {
	    $this->setDataFileName($dataFileName);
	}
	return $ret;
    }

    /**
     * Get the size of the source object.  If it's a cacheable
     * object and the cache is cleared, this will return the size
     * that it *will* be once the cache is recreated.
     * 
     * @access public
     * @return int the size of the object
     */
    function getSize() {
    }

    /**
     * Is this item a derivative?
     *
     * If an item is a derative object, it can be expired using
     * the expireCache() method.  You must call rebuildCache() to
     * recreate the item.
     * 
     * @access public
     * @return boolean whether the item is expireable or not
     */
    function isDerative() {
    }

    /**
     * What's the source of this derivative?
     *
     * Only applicable if isDerative() returns true.
     * 
     * @access public
     * @return int the id of another DataContainer 
     */
    function getDerivativeSource() {
    }

    /**
     * What's the source of this derivative?
     *
     * Only applicable if isDerative() returns true.
     * 
     * @access public
     * @param int the id of another DataContainer 
     */
    function setDerivativeSource($id) {
	$this->setNeedToBeSaved();
    }

    /**
     * Get the commands used to derive this data from its source
     *
     * Only applicable if isDerative() returns true.
     * 
     * @access public
     * @return int a derivative type
     */
    function getDerivativeCommands() {
    }

    /**
     * Set the commands used to derive this data from its source
     *
     * Only applicable if isDerative() returns true.  The commands
     * follow this EBNF format:
     *
     * COMMAND   = <OPERATION> | <COMMAND> ; <COMMAND>
     * OPERATION = ROTATE | SCALE | RESIZE | CROP
     * ROTATE    = "rotate" ":" ("-90" | "180" | "90")
     * CROP      = "crop" ":" NUMBER "," NUMBER "," NUMBER "," NUMBER
     * RESIZE    = "resize" ":" NUMBER "," NUMBER 
     * SCALE     = "scale" ":" NUMBER 
     * 
     * @access public
     * @param string a sequence of derivative commands
     */
    function setDerivativeCommands($commands) {
	$this->setNeedToBeSaved();
    }

    /**
     * Has the cache for this item expired?
     *
     * If the cache is expired, it can be rebuilt with rebuildCache()
     * 
     * @access public
     * @return boolean true if the item is expired (ie, the cache is empty)
     */
    function isCacheCurrent() {
    }

    /**
     * Expire the cache.
     * 
     * @access public
     * @return int a status code
     */
    function expireCache() {
    }

    /**
     * Rebuild the cache.
     * 
     * @access public
     * @return int a status code
     */
    function rebuildCache() {
    }

    /**
     * Get the size of the cached data.
     *
     * Get the size of the data that we're currently keeping in 
     * the cache for this source object.  It'll be 0 if the cache
     * has been cleared.
     * 
     * @access public
     * @return int the size of the cache
     */
    function getCacheSize() {
    }

    /**
     * Get name of the data file.
     *
     * Get the name of the data file.
     * 
     * @access public
     * @return string the file name
     */
    function getDataFileName() {
    }

    /**
     * Get the full path to the data file.
     *
     * Get the full path to the data file.
     * 
     * @access public
     * @return string the file path
     */
    function getDataFilePath() {
    }

    /**
     * Add a derived child DataContainer
     *
     * This DataContainer will start tracking the fact that the DataContainer
     * provided is a derivative of this one.
     * 
     * @access public
     * @param string the id of the child DataContainer
     */
    function addDerivativeChildId($id) {
    }

    /**
     * Remove a derived child DataContainer
     *
     * This DataContainer will stop tracking the fact that the DataContainer
     * provided is a derivative of this one.
     * 
     * @access public
     * @param string the id of the child DataContainer
     */
    function removeDerivativeChildId($id) {
    }
    /* BEGIN: Accessor Block.  DO NOT MODIFY! */
    
    /**
     * Return the meta class information about this class
     *
     * @return array member => array(type, class)
     */
    function getMetaInfo() {
        $meta = parent::getMetaInfo();
        $meta['members']['derivativeSource'] = array(
            'class' => 'DataContainer',
            'type' => STORAGE_TYPE_INTEGER);
        $meta['members']['dataFileName'] = array(
            'class' => 'DataContainer',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_MEDIUM);
        $meta['members']['derivativeChildren'] = array(
            'class' => 'DataContainer',
            'type' => STORAGE_TYPE_MAP |
                      STORAGE_TYPE_INTEGER);
        $meta['members']['derivativeCommands'] = array(
            'class' => 'DataContainer',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_LARGE);
        $meta['members']['isDerivative'] = array(
            'class' => 'DataContainer',
            'type' => STORAGE_TYPE_BOOLEAN);
        $meta['members']['cacheIsCurrent'] = array(
            'class' => 'DataContainer',
            'type' => STORAGE_TYPE_BOOLEAN);
        $meta['version'] = array('major' => 1, 'minor' => 0);
    
        return $meta;
    }
    
    /**
     * Set the value of cacheIsCurrent
     * 
     * @param bool the new value for cacheIsCurrent
     * @access public
     */
    function setCacheIsCurrent($value) {
        assert('isset($value)');
        $this->_cacheIsCurrent = $value;
        $this->modifyPersistentMember('cacheIsCurrent');
    }
    
    /**
     * Get the value of cacheIsCurrent
     * 
     * @access public
     * @return bool the current value of cacheIsCurrent
     */
    function getCacheIsCurrent() {
        return $this->_cacheIsCurrent;
    }
    
    /**
     * Set the value of dataFileName
     * 
     * @param string the new value for dataFileName
     * @access public
     */
    function setDataFileName($value) {
        assert('isset($value)');
        $this->_dataFileName = $value;
        $this->modifyPersistentMember('dataFileName');
    }
    
    /**
     * Get the value of dataFileName
     * 
     * @access public
     * @return string the current value of dataFileName
     */
    function getDataFileName() {
        return $this->_dataFileName;
    }
    
    /**
     * Set the value of derivativeCommands
     * 
     * @param string the new value for derivativeCommands
     * @access public
     */
    function setDerivativeCommands($value) {
        assert('isset($value)');
        $this->_derivativeCommands = $value;
        $this->modifyPersistentMember('derivativeCommands');
    }
    
    /**
     * Get the value of derivativeCommands
     * 
     * @access public
     * @return string the current value of derivativeCommands
     */
    function getDerivativeCommands() {
        return $this->_derivativeCommands;
    }
    
    /**
     * Set the value of derivativeSource
     * 
     * @param int the new value for derivativeSource
     * @access public
     */
    function setDerivativeSource($value) {
        assert('isset($value)');
        $this->_derivativeSource = $value;
        $this->modifyPersistentMember('derivativeSource');
    }
    
    /**
     * Get the value of derivativeSource
     * 
     * @access public
     * @return int the current value of derivativeSource
     */
    function getDerivativeSource() {
        return $this->_derivativeSource;
    }
    
    /**
     * Set the value of isDerivative
     * 
     * @param bool the new value for isDerivative
     * @access public
     */
    function setIsDerivative($value) {
        assert('isset($value)');
        $this->_isDerivative = $value;
        $this->modifyPersistentMember('isDerivative');
    }
    
    /**
     * Get the value of isDerivative
     * 
     * @access public
     * @return bool the current value of isDerivative
     */
    function getIsDerivative() {
        return $this->_isDerivative;
    }
    
    
    /* END: Accessor Block.  DO NOT MODIFY! */
}
?>
