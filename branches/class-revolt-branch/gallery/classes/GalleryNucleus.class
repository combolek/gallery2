<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * The central seed that all Gallery objects are formed around
 *
 * This object performs all of the basic functions required in all
 * Gallery objects.
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryNucleus {

    /**
     * The id of this item
     */
    var $_id;

    /**
     * Data version of this GalleryNucleus
     *
     * @var float $_dataVersion
     */
    var $_dataVersion;

    /**
     * The id of the parent of this GalleryNucleus
     * @var int $_parentId
     */
    var $_parentId;

    /**
     * The path component of this item (eg. "image1").  This
     * value, when combined with the paths of all the parent
     * objects (say, "rootAlbum", "album01") will form the
     * complete path to the item ("rootAlbum/album01/image1").
     */
    var $_path;

    /**
     * Keep track of which internal values are persistant and which ones aren't
     * so that we'll know when and what to save to the database.
     * 
     * @var array $_persistentInfo
     */
    var $_persistentInfo;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     *
     * Initialize this instance and then load it from the persistent
     * store.
     *
     * @param string the id of the object to load
     */
    function GalleryNucleus($id='') {
	$this->constructor();
	$this->loadOrCreate($id);
    }

    /**
     * Initialize this instance
     *
     * @param string the id of the object to load
     */
    function constructor() {

	/*
	 * Initialize our persistent info tracker
	 */
	$this->_persistentInfo = new stdClass();
	$this->_persistentInfo->modified = array();
	$this->_persistentInfo->members = array();

	/*
	 * Register the persistent variables for this class
	 */
	$this->registerPersistentMember("id", STORAGE_INTEGER | STORAGE_ID);
	$this->registerPersistentMember("dataVersion", STORAGE_INTEGER);
	$this->registerPersistentMember("parentId", STORAGE_INTEGER);
	$this->registerPersistentMember("path", STORAGE_STRING);
    }

    /**
     * Hook this object up to the persistent store
     *
     * If an id is provided, load from the persistent store.  Else, create a
     * new object in the store. 
     */
    function loadOrCreate($id='') {
	global $gallery;
	$storage =& $gallery->getStorage();

	if (empty($id)) {
	    $storage->newNucleus($this);
	} else {
	    $storage->loadNucleus($id, $this);
	}
    }

    /**
     * Get the id of this GalleryNucleus
     *
     * Get the id of this GalleryNucleus
     *
     * @return string the id of this GalleryNucleus
     * @access public
     */
    function getId() {
	return $this->_id;
    }

    /**
     * Get the version of this GalleryNucleus
     *
     * Return the version of this GalleryNucleus' data.
     *
     * @return float the data version of this GalleryNucleus
     * @access public
     */
    function getDataVersion() {
	return $this->_dataVersion;
    }
    
    /**
     * Check the data version and upgrade if necessary
     *
     * Check the data version of this GalleryNucleus and instruct it
     * to upgrade itself, if necessary.
     * 
     * @return boolean true if the item was upgraded
     * @access public
     */
    function checkDataVersionAndUpgrade() {
	// No upgrade instructions as yet.
    }

    /**
     * Set the id of the GalleryNucleus that owns this one.
     *
     * Set the id to the GalleryNucleus that owns this one.
     *
     * @param int id of the parent
     * @access public
     */
    function setParentId($id) {
	assert($id);
	$this->_parentId = $id;
	$this->modifyPersistentMember("parentId");
    }

    /**
     * Return the id of the GalleryNucleus that owns this one.
     *
     * Return the id to the GalleryNucleus that owns this one.
     *
     * @access public
     * @return int id of the parent
     */
    function getParentId() {
	return $this->_parentId;
    }

    /**
     * Return the path component of this item
     *
     * Return the path component of this item
     *
     * @access public
     * @return string the path component
     */
    function getPath() {
	return $this->_path;
    }

    /**
     * Return the full path of this item
     *
     * Return the full path of this item
     *
     * @access public
     * @return array an array of string path components
     */
    function getFullPath() {
	$path = $this->_parent->getFullPath();
	$path[] = $this->_path;
	return $path;
    }

    /**
     * Set the path component of this item
     *
     * Set the path component of this item
     *
     * @access public
     * @param string the path component
     * @return boolean false if the path already exists, true otherwise
     */
    function setPath($path) {
	$this->_path = $path;
	$this->modifyPersistentMember("path");
    }

    /**
     * Save the changes to this GalleryNucleus
     *
     * Save the changes to this GalleryNucleus.  
     *
     * @access public
     * @return int a status code
     */
    function save() {
	if ($this->_needToBeSaved) {
	    return $this->_storage->save($this);
	}
	return SUCCESS;
    }

    /**
     * Refresh this item from the persistent store
     *
     * @access public
     * @return int a status code
     */
    function refresh() {
	$this = $this->_storage->refresh($this);
	return SUCCESS;
    }

    /**
     * Delete this GalleryNucleus
     *
     * It's only legal to delete GalleryNuclei that have already been removed
     * from the tree (ie, have no parent).  
     *
     * @access public
     * @return int a status code
     */
    function delete() {
	return $this->_storage->delete($this);
    }

    /**
     * Register a class member that will be kept in the persistent store.
     *
     * @param string the name of the member
     * @param int a hint to the storage class for how to store this value
     */
    function registerPersistentMember($name, $typeHint) {
	// Sanity check
	assert('empty($this->_persistentInfo->members[$name])');
	    
	$this->_persistentInfo->members[$name] = $typeHint;
    }
}
?>
