<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


/**
 * Base class for all objects in the Gallery composite tree
 *
 * Container for all functionality and data common objects that 
 * Gallery can deal with.  Each GalleryItem has the capacity
 * to own other GalleryItems in a parent-child relationship.
 * That capacity can be enabled or disabled by subclasses of
 * GalleryItem.
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryItem extends GalleryNucleus {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * An ordered list of 0+ GalleryItem children contained by this item
     *
     * @var object GalleryList $_childIds
     */
    var $_childIds;

    /**
     * An ordered list of 0+ CommentContainer ids.
     *
     * @var object GalleryList $_commentIds
     */
    var $_commentIds;

    /**
     * Date and time this item was created, in seconds since the epoch.
     *
     * @var int $_creationTimestamp;
     */
    var $_creationTimestamp;

    /**
     * The (long) description of this item
     *
     * @var int $_description;
     */
    var $_description;

    /**
     * Is HTML allowed in this item's title and description?
     *
     * @var int $_isHtmlAllowed;
     */
    var $_isHtmlAllowed;
	     
    /**
     * A set of keywords that describe this item
     *
     * @var int $_keywords;
     */
    var $_keywords;

    /**
     * Date and time this item was last modified, in seconds since the epoch.
     *
     * @var int $_modificationTimestamp;
     */
    var $_modificationTimestamp;

    /**
     * The id of the User who owns this item
     *
     * @var int $_ownerId
     */
    var $_ownerId;

    /**
     * Properties of this GalleryItem
     *
     * This area is reserved for extensions to Gallery.  Any string data can be
     * stored in this table.
     *
     * @var object GalleryMap $_properties
     */
    var $_properties;

    /**
     * The id of the ImageContainer containing this GalleryItem's thumbnail
     *
     * @var int $_thumbnailId
     */
    var $_thumbnailId;

    /**
     * The (short) title of this item
     *
     * @var int $_title;
     */
    var $_title;

    /**
     * How many times this item has been viewed
     *
     * @var int $_viewCount;
     */
    var $_viewCount;

    /**
     * Date and time marking the beginning of the view count
     *
     * @var int $_viewedSinceTimestamp;
     */
    var $_viewedSinceTimestamp;

    /**
     * A GalleryMap of usernames mapped to allowed permissions
     *
     * @var object GalleryMap $_allowedPermissions;
     * @private
     */
    var $_allowedPermissions;
    
    /**
     * A GalleryMap of usernames mapped to denied permissions
     *
     * @var object GalleryMap $_deniedPermissions;
     * @private
     */
    var $_deniedPermissions;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     *
     * Initialize this instance and then load it from the persistent
     * store.
     *
     * @access public
     */
    function GalleryItem() {
	$this->GalleryNucleus();

	$this->registerPersistentMember("GalleryItem", "childIds", STORAGE_LIST);
	$this->registerPersistentMember("GalleryItem", "commentIds", STORAGE_LIST);
	$this->registerPersistentMember("GalleryItem", "creationTimestamp", STORAGE_INTEGER);
	$this->registerPersistentMember("GalleryItem", "description", STORAGE_TEXT);
	$this->registerPersistentMember("GalleryItem", "isHtmlAllowed", STORAGE_BOOLEAN);
	$this->registerPersistentMember("GalleryItem", "keywords", STORAGE_STRING);
	$this->registerPersistentMember("GalleryItem", "modificationTimestamp", STORAGE_INTEGER);
	$this->registerPersistentMember("GalleryItem", "ownerId", STORAGE_INTEGER);
	$this->registerPersistentMember("GalleryItem", "properties", STORAGE_MAP);
	$this->registerPersistentMember("GalleryItem", "thumbnailId", STORAGE_INTEGER);
	$this->registerPersistentMember("GalleryItem", "title", STORAGE_STRING);
	$this->registerPersistentMember("GalleryItem", "viewCount", STORAGE_INTEGER);
	$this->registerPersistentMember("GalleryItem", "viewedSinceTimestamp", STORAGE_INTEGER);

	/* HINT: Do not auto-generate accessors for these members */
	$this->registerPersistentMember("GalleryItem", "allowedPermission", STORAGE_MAP);
	$this->registerPersistentMember("GalleryItem", "deniedPermission", STORAGE_MAP);
    }

    /**
     * Get the list of supported file types
     *
     * Get the list of supported file types that this GalleryItem can
     * support.
     *
     * @access public
     * @return array lowercase file tags tags (eg "jpg", "gif")
     */
    function getSupportedFiletypes() {
	// The base GalleryItem does not support any types specifically
	return array();
    }
		
    /**
     * Is this file type supported?
     *
     * Is this file type supported?
     * 
     * @access public
     * @param string a file tag (eg "jpg", "Jpg", "JPG", "JPEG")
     * @return boolean true if the tag given is supported 
     */
    function isSupportedFiletype($tag) {
	// The base GalleryItem does not support any types specifically
	return false;
    }
		
    /**
     * Can this item contain other items?
     *
     * By default, GalleryItems cannot contain other items.  However
     * Subclasses may wish to override this method to allow
     * containment.
     *
     * @access public
     * @return boolean true if the item can contain children
     */
    function canContainChildren() {
	return false;
    }

    /**
     * How many children does this item directly contain?
     * 
     * This is the number of items visible to the active user.  Internally this
     * calls getChildItemIds() to figure out how many are around (and caches
     * the result for the duration of this in-memory version)
     *
     * @see getChildItemIds()
     * @access public
     * @return int the number of children
     */
    function getLocalChildCount() {
	// Must track which children have their own permission
	// set so that we can optimize this count process.  Otherwise
	// we'll have to check each child individually

	// XXX: The child counting code is tricky if we want to obscure the
	// fact that hidden items even exist at all.  It will be very slow if
	// we have to calculate the visibility of every item.  Calculating once
	// and maintaining deltas seems very error prone.  Let's put this whole
	// issue off for now.
	assert('false');
    }

    /**
     * How many children does this item and all of its sub-items
     * contain, including itself?
     *
     * If this item can't contain children, the answer is 0, else
     * it's the number of immediate children and all their
     * children, etc, etc.
     *
     * @access public
     * @return int the number of children
     */
    function getTotalChildCount() {
	// Must track which children have their own permission
	// set so that we can optimize this count process.  Otherwise
	// we'll have to check each child individually

	// See comment in getLocalChildCount();
    	assert('false');
    }

    /**
     * Adjust the child count
     *
     * Change the cached count of the number of total children below this item.
     *
     * @see getTotalChildCount()
     * @access public
     * @param int a delta value
     */
    function adjustTotalChildCount() {
	// See comment in getLocalChildCount();
    	assert('false');
    }

    /**
     * Get the list of children ids
     *
     * If this item is allowed to have children, return the list of child ids
     * it contains that are visible to the active user.  Else, return an empty
     * array.
     *
     * @access public
     * @return array a list of 0+ GalleryItem ids
     */
    function getChildItemIds() {
	return $this->_childIds->toArray();
    }

    /**
     * Add a specific item as a child of this item.  
     *
     * This is only legal if this item is allowed to have children.  If the
     * child item already has a parent, it is removed from that other parent if
     * it's successfully added to this one.
     *
     * Move all non-derived DataContainers of the child item from their old
     * location to the new one as part of this process.
     *
     * @access public
     * @param object GalleryItem the child item
     * @return int a status code
     */
    function addItem($item) {
	if (!$this->canContainChildren()) {
	    return ERROR | ERROR_INVALID_OPERATION;
	}
	
	$this->_childIds->addUnique($item->getId());
	$this->modifyPersistentMember("childIds");
    }

    /**
     * Remove the specified child item
     *
     * This is only legal if this item is allowed to have children.
     *
     * @access public
     * @param string the child item's id
     */
    function removeItem($id) {
	if (!$this->canContainChildren()) {
	    return ERROR | ERROR_INVALID_OPERATION;
	}
	
	$this->_childIds->removeValue($item->getId());
	$this->modifyPersistentMember("childIds");
    }

    /**
     * Does the user have the given permission?
     *
     * This calculation is made taking into account the appropriate
     * attributes for this user from all of its parents.
     *
     * @access public
     * @param string user id
     * @param string permission name
     * @return boolean true if the given user id has the given permission for this item
     */
    function hasPermission($id, $perm) {

	/* Check for an explicit deny.  Deny supercedes allow. */
	$denied = $this->_deniedPermissions->getValue($id);
	if ($denied && ($denied & $perm)) {
	    return false;
	}

	/* Check for an explicit allow */
	$allowed = $this->_allowedPermissions->getValue($id);
	if ($allowed && ($allowed & $perm)) {
	    return true;
	}

	/* Defer to the parent */
	$parent =& $this->getParent();
	if ($parent) {
	    return $parent->hasPermission($id, $perm);
	}

	/* No clear answer, so the default is deny */
	return false;
    }

    /**
     * Allow the specified permission for the specified user
     *
     * Adjust the user's permissions for this item to set the permission
     * provided.  
     *
     * @access public
     * @param string the id of the user
     * @param int the specific permission
     */
    function allowPermission($id, $perm) {

	/*
	 * Clear the permission for this id.  This has the nice side benefit of
	 * calling modifyPersistentMember()
	 */
	$this->removePermission($id, $perm);

	/* Grant the permission */
	$allowed = $this->_allowedPermissions->getValue($id);
	if (!($allowed && ($allowed & $perm))) {
	    $allowed = ($allowed | $perm);
	    $this->_allowedPermissions->setValue($id, $allowed);
	}
    }

    /**
     * Deny the specified permission for the specified user
     *
     * Adjust the user's permissions for this item to set the permission
     * provided.  
     *
     * @access public
     * @param string the id of the user
     * @param int the specific permission
     */
    function denyPermission($id, $perm) {

	/*
	 * Clear the permission for this id.  This has the nice side benefit of
	 * calling modifyPersistentMember()
	 */
	$this->removePermission($id, $perm);

	/* Grant the permission */
	$denied = $this->_deniedPermissions->getValue($id);
	if (!($denied && ($denied & $perm))) {
	    $denied = ($denied | $perm);
	    $this->_deniedPermissions->setValue($id, $denied);
	}

    }

    /**
     * Remove the specified permission for the specified user
     *
     * Adjust the user's permissions for this item to remove the permission
     * provided.  This basically delegates the permission check for the user/item
     * to the parent.
     *
     * @access public
     * @param string the id of the user
     * @param int the specific permission
     */
    function removePermission($id, $perm) {

	/* If the user was allowed this permission, un-allow them */
	$allowed = $this->_allowedPermissions->getValue($id);
	if ($allowed && ($allowed & $perm)) {
	    $allowed = ($allowed ^ $perm);
	    $this->_allowedPermissions->setValue($id, $allowed);
	}

	/* If the user was denied this permission, un-deny them */
	$denied = $this->_deniedPermissions->getValue($id);
	if ($denied && ($denied & $perm)) {
	    $denied = ($denied ^ $perm);
	    $this->_deniedPermissions->setValue($id, $denied);
	}

	$this->modifyPersistentMember("deniedPermissions");
	$this->modifyPersistentMember("allowedPermissions");
    }

    /**
     * Return all permissions.
     *
     * Return an associative array of permissions for this item.  The results
     * are a merged set of permissions including the parent's permissions and
     * the ones specific to this particular item.  
     *
     * @access public
     * @return array two associative arrays, the allowed and denied permission set
     */
    function getAllPermissions() {
	$parent =& $this->getParent();
	if ($parent) {
	    list($allowed, $denied) = $parent->getAllPermissions();
	} else {
	    $allowed = array();
	    $denied = array();
	}

	$tmp = $this->_deniedPermissions->toArray();
	foreach ($tmp as $id => $perm) {
	    /* Remove allows from the denied list, add them to allowed list */
	    $denied[$id] &= ~$perm;
	    $allowed[$id] |= $perm; 
	}

	$tmp = $this->_allowedPermissions->toArray();
	foreach ($tmp as $id => $perm) {
	    /* Remove denys from the allowed list, add them to deny list */
	    $allowed[$id] &= ~$perm; 
	    $denied[$id] |= $perm;
	}

	return array($allowed, $denied);
    }
    
    /*
     * ============================================================
     * BEGIN: Accessor methods
     *   Don't modify anything inside this block as it will get
     *   overwritten by the code that generates these accessor
     *   methods.
     * ============================================================
     */
    
    /**
     * Get a reference to childIds
     * 
     * Return a reference to the actual instance of childIds
     * 
     * @access public
     * @return object GalleryList the childIds
     */
    function getChildIds() {
        return $this->_childIds;
    }
    
    /**
     * Get a reference to commentIds
     * 
     * Return a reference to the actual instance of commentIds
     * 
     * @access public
     * @return object GalleryList the commentIds
     */
    function getCommentIds() {
        return $this->_commentIds;
    }
    
    /**
     * Set the value of creationTimestamp
     * 
     * @param int the new value for creationTimestamp
     * @access public
     */
    function setCreationTimestamp($value) {
        assert('isset($value)');
        $this->_creationTimestamp = $value;
        $this->modifyPersistentMember('creationTimestamp');
    }
    
    /**
     * Get the value of creationTimestamp
     * 
     * @access public
     * @return int the current value of creationTimestamp
     */
    function getCreationTimestamp() {
        return $this->_creationTimestamp;
    }
    
    /**
     * Set the value of description
     * 
     * @param string the new value for description
     * @access public
     */
    function setDescription($value) {
        assert('isset($value)');
        $this->_description = $value;
        $this->modifyPersistentMember('description');
    }
    
    /**
     * Get the value of description
     * 
     * @access public
     * @return string the current value of description
     */
    function getDescription() {
        return $this->_description;
    }
    
    /**
     * Set the value of isHtmlAllowed
     * 
     * @param bool the new value for isHtmlAllowed
     * @access public
     */
    function setIsHtmlAllowed($value) {
        assert('isset($value)');
        $this->_isHtmlAllowed = $value;
        $this->modifyPersistentMember('isHtmlAllowed');
    }
    
    /**
     * Get the value of isHtmlAllowed
     * 
     * @access public
     * @return bool the current value of isHtmlAllowed
     */
    function getIsHtmlAllowed() {
        return $this->_isHtmlAllowed;
    }
    
    /**
     * Set the value of keywords
     * 
     * @param string the new value for keywords
     * @access public
     */
    function setKeywords($value) {
        assert('isset($value)');
        $this->_keywords = $value;
        $this->modifyPersistentMember('keywords');
    }
    
    /**
     * Get the value of keywords
     * 
     * @access public
     * @return string the current value of keywords
     */
    function getKeywords() {
        return $this->_keywords;
    }
    
    /**
     * Set the value of modificationTimestamp
     * 
     * @param int the new value for modificationTimestamp
     * @access public
     */
    function setModificationTimestamp($value) {
        assert('isset($value)');
        $this->_modificationTimestamp = $value;
        $this->modifyPersistentMember('modificationTimestamp');
    }
    
    /**
     * Get the value of modificationTimestamp
     * 
     * @access public
     * @return int the current value of modificationTimestamp
     */
    function getModificationTimestamp() {
        return $this->_modificationTimestamp;
    }
    
    /**
     * Set the value of ownerId
     * 
     * @param int the new value for ownerId
     * @access public
     */
    function setOwnerId($value) {
        assert('isset($value)');
        $this->_ownerId = $value;
        $this->modifyPersistentMember('ownerId');
    }
    
    /**
     * Get the value of ownerId
     * 
     * @access public
     * @return int the current value of ownerId
     */
    function getOwnerId() {
        return $this->_ownerId;
    }
    
    /**
     * Get a reference to properties
     * 
     * Return a reference to the actual instance of properties
     * 
     * @access public
     * @return object GalleryMap the properties
     */
    function getProperties() {
        return $this->_properties;
    }
    
    /**
     * Set the value of thumbnailId
     * 
     * @param int the new value for thumbnailId
     * @access public
     */
    function setThumbnailId($value) {
        assert('isset($value)');
        $this->_thumbnailId = $value;
        $this->modifyPersistentMember('thumbnailId');
    }
    
    /**
     * Get the value of thumbnailId
     * 
     * @access public
     * @return int the current value of thumbnailId
     */
    function getThumbnailId() {
        return $this->_thumbnailId;
    }
    
    /**
     * Set the value of title
     * 
     * @param string the new value for title
     * @access public
     */
    function setTitle($value) {
        assert('isset($value)');
        $this->_title = $value;
        $this->modifyPersistentMember('title');
    }
    
    /**
     * Get the value of title
     * 
     * @access public
     * @return string the current value of title
     */
    function getTitle() {
        return $this->_title;
    }
    
    /**
     * Set the value of viewCount
     * 
     * @param int the new value for viewCount
     * @access public
     */
    function setViewCount($value) {
        assert('isset($value)');
        $this->_viewCount = $value;
        $this->modifyPersistentMember('viewCount');
    }
    
    /**
     * Get the value of viewCount
     * 
     * @access public
     * @return int the current value of viewCount
     */
    function getViewCount() {
        return $this->_viewCount;
    }
    
    /**
     * Set the value of viewedSinceTimestamp
     * 
     * @param int the new value for viewedSinceTimestamp
     * @access public
     */
    function setViewedSinceTimestamp($value) {
        assert('isset($value)');
        $this->_viewedSinceTimestamp = $value;
        $this->modifyPersistentMember('viewedSinceTimestamp');
    }
    
    /**
     * Get the value of viewedSinceTimestamp
     * 
     * @access public
     * @return int the current value of viewedSinceTimestamp
     */
    function getViewedSinceTimestamp() {
        return $this->_viewedSinceTimestamp;
    }
    
    /*
     * ============================================================
     * END: Accessor methods
     * ============================================================
     */
}
?>
