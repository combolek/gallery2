<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * A subclass of GalleryItem for items containing actual data
 *
 * DataItems are ones that have an actual data source, such as 
 * PhotoItem or MovieItem.
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class DataItem extends GalleryItem {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The DataContainer containing the actual source object for this item,
     * if applicable.
     *
     * @var object DataContainer
     */
    var $_source;

    /**
     * The DataContainer containing the preferred source object for this
     * item, if applicable.
     *
     * @var object DataContainer
     */
    var $_preferredSource;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     *
     * Call the superclass on the id provided.  That will create
     * either a blank object (if there's no id) or it will load the
     * appropriate object from the persistent storage.  If no id
     * was provided, initialize all private variables to their
     * default values.
     *
     * @access public
     * @param string the id of an object to be loaded
     */
    function DataItem($id="") {
	$this->GalleryItem($id);

	if (empty($id)) {
	    // Set values to defaults
	}
    }

    /**
     * Set the source of this item to the file provided
     *
     * If this item already had a source, replace it with the one
     * we provide here.  Subclasses should overload this method to
     * do the appropriate thing when their data source changes.
     *
     * @access public
     * @param string the path to a file
     */
    function setSourceId($id) {
    }

    /**
     * Get the source id of this item.
     *
     * Return the id of the DataContainer that contains the source
     * for this item.  For example, if the DataItem is a PhotoItem,
     * the source is the full size original image.
     *
     * @access public
     * @return string the id of a DataContainer
     */
    function getSourceId() {
    }

    /**
     * Set this item to have no source.
     *
     * If this item already had a source, remove it.  Subclasses should
     * overload this method to do the appropriate thing when their data
     * source changes.
     *
     * @access public
     */
    function removeSourceId() {
    }

    /**
     * Set the preferred source of this item to the file provided
     *
     * If this item already had a source, replace it with the one
     * we provide here.  Subclasses should overload this method to
     * do the appropriate thing when their data source changes.
     *
     * @access public
     * @param string the path to a file
     */
    function setPreferredSourceId($id) {
    }

    /**
     * Get the preferred source id of this item.
     *
     * Return the id of the DataContainer that contains the preferred
     * source for this item.  A preferred source is typically a version of
     * the source that we prefer over the real source for most operations.
     * Eg, if we want to rotate the source image we'd create a derivative
     * ImageContainer that derives it's data from the real source image and
     * store that new one as the preferred source.
     *
     * @access public
     * @return string the id of a DataContainer
     */
    function getPreferredSourceId() {
    }

    /**
     * Set this item to have no preferred source.
     *
     * If this item already had a preferred source, remove it.  Subclasses
     * should overload this method to do the appropriate thing when their
     * data source changes.
     *
     * @access public
     */
    function removePreferredSourceId() {
    }

}
?>
