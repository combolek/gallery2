<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
 * Require the ADOdb libraries
 */
require_once(dirname(__FILE__) . '/adodb/adodb.inc.php');
$ADODB_FETCH_MODE = ADODB_FETCH_ASSOC;

/**
 * Name of the sequence we'll use for GalleryNucleus ids
 */
define('DATABASE_ID_SEQUENCE', 'idSequence');

/**
 * Prefix to append to table names
 */
define('DATABASE_TABLE_PREFIX', 'gallery_');

/**
 * Database connection states
 */
define('DATABASE_STATUS_NOT_CONNECTED', 0);
define('DATABASE_STATUS_PARTIALLY_CONNECTED', 1);
define('DATABASE_STATUS_FULLY_CONNECTED', 2);

/**
 * Database implementation of the GalleryStorage interface.
 *
 * This object implements the hooks for saving and restoring objects in a
 * relational database.
 *
 * @version $Id$
 * @package GalleryStorage
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class DatabaseStorage extends GalleryStorage {

    /**
     * Internal pointer to ADOdb database object
     *
     * @var object ADOdb $_db
     */
    var $_db;

    /**
     * The type of database we're connecting to (eg 'mysql', 'postgres')
     *
     * @var string $_type
     */
    var $_type;
    
    /**
     * Name of the database user
     * 
     * @var string $_username
     */
    var $_username;
    
    /**
     * Password for the database user
     * 
     * @var string $_password
     */
    var $_password;
    
    /**
     * Name of the database to use
     * 
     * @var string $_database
     */
    var $_database;

    /**
     * Host the database runs on
     * 
     * @var string $_hostname
     */
    var $_hostname;

    /**
     * A DatabaseSchema instance, used to check and update the schema
     * 
     * @var object DatabaseSchema an instance of the DatabaseSchema class
     * @access private
     */
    var $_hostname;

    /**
     * Status of the database connection
     * 
     * @var int status
     * @access private
     */
    var $_connectionStatus;

    /**
     * Constructor.
     */
    function DatabaseStorage() {
	$this->GalleryStorage();
	$this->_connectionStatus = DATABASE_STATUS_NOT_CONNECTED;
    }

    /**
     * Specify the type of database using ADOdb names (eg 'mysql', 'postgres')
     *
     * @param string the database type
     */
    function setType($type) {
	$this->_type = $type;
    }

    /**
     * Specify the name of the user with which to connect to the database 
     *
     * @param string username
     */
    function setUsername($username) {
	$this->_username = $username;
    }

    /**
     * Specify the database user's password
     *
     * @param string password (in clear text)
     */
    function setPassword($password) {
	$this->_password = $password;
    }

    /**
     * Specify the name of the logical database
     *
     * @param string the name of the logical database
     */
    function setDatabase($database) {
	$this->_database = $database;
    }

    /**
     * Host the database runs on 
     *
     * @param string a hostname
     */
    function setHostname($hostname) {
	$this->_hostname = $hostname;
    }

    /**
     * Connect to the database
     *
     * @return int a status code
     */
    function connect() {
	if (empty($this->_type) ||
	        empty($this->_username) ||
	        empty($this->_password) ||
	        empty($this->_hostname)) {
	    return ERROR | ERROR_MISSING_VALUE;
	}

	$this->_traceStart();
	$this->_db = ADONewConnection($this->_type);
	if (empty($this->_db)) {
	    return ERROR;
	}

	/*
	 * Turn on debugging in the database connection if Gallery is in debug
	 * mode
	 */
	global $gallery;
	if ($gallery->getDebug()) {
	    $this->_db->debug = true;
	}

	if (empty($this->_database)) {
	    $ret = $this->_db->PConnect($this->_hostname,
					$this->_username,
					$this->_password);
	    $this->_connectionStatus = DATABASE_STATUS_PARTIALLY_CONNECTED;
	} else {
	    $ret = $this->_db->PConnect($this->_hostname,
					$this->_username,
					$this->_password,
					$this->_database);
	    $this->_connectionStatus = DATABASE_STATUS_FULLY_CONNECTED;
	}
	$this->_traceStop();

	if (!$ret) {
	    $this->_connectionStatus = DATABASE_STATUS_NOT_CONNECTED;
	    $this->_db = null;
	    return ERROR | ERROR_DATABASE_FAILURE;
	}

	return SUCCESS;
    }

    /**
     * Return the id of the GalleryItem associated with the path provided
     *
     * Return the id associated with the given path. Example path: 
     * "/birthdays/fred" .. this is the "fred" item in the "birthdays" 
     * item.  It doesn't really matter what types of items these are, as 
     * long as the path is legitimate.
     *
     * This method must be implemented by subclasses of Gallery.
     *
     * @access public
     * @abstract
     * @param string the path to a GalleryItem
     * @return string the id of the GalleryItem
     */
    function getIdByPath($path) {
	if ($this->_connectionStatus != DATABASE_STATUS_FULLY_CONNECTED) {
	    return ERROR | ERROR_DATABASE_NOT_CONNECTED;
	}
    }

    /**
     * Load a new GalleryNucleus from storage
     *
     * @access public
     * @param string the id of the stored GalleryNucleus
     * @param object GalleryNucleus the object we're loading into
     * @return int a status code
     */
    function loadNucleus($id, &$nucleus) {
	if ($this->_connectionStatus != DATABASE_STATUS_FULLY_CONNECTED) {
	    return ERROR | ERROR_DATABASE_NOT_CONNECTED;
	}

	return ERROR;
    }

    /**
     * Save the changes to the GalleryNucleus.  
     *
     * @access public
     * @param object GalleryNucleus the GalleryNucleus to save
     * @return int a status code
     */
    function saveNucleus(&$nucleus) {
	if ($this->_connectionStatus != DATABASE_STATUS_FULLY_CONNECTED) {
	    return ERROR | ERROR_DATABASE_NOT_CONNECTED;
	}

	/*
	 * Get our persistent and meta info for this class
	 */
	$metaInfo = $this->_metaInfo->describeClass($nucleus);
	$persistentInfo = $nucleus->getPersistentInfo();
	$idColumn = null;

	/*
	 * Locate changed fields.
	 */
	foreach ($metaInfo as $name => $info) {
	    /* Locate the id column */
	    if ($metaInfo[$name]['type'] & STORAGE_TYPE_ID) {
		$func = 'get' . ucfirst($name);
		$value = $nucleus->$func();
		$idColumn = array('name' => $name, 'value' => $value);
	    }
	    
	    /* If the member is modified, record the new value in our table */
	    if (isset($persistentInfo->modified[$name])) {
		$func = 'get' . ucfirst($name);
		$value = $nucleus->$func();
		$dataTable[$info['class']][$name] = $value;
	    }
	    
	    /*
	     * If we haven't set up a table for this class, do so now.
	     * Otherwise we don't have a complete list of tables that we
	     * need to insert into in order for this class to be completely
	     * serialized.
	     */
	    if (!isset($dataTable[$info['class']])) {
		$dataTable[$info['class']] = array();
	    }
	}

	if ($nucleus->testPersistentFlag(STORAGE_FLAG_NEWLY_CREATED)) {

	    /*
	     * Iterate through the data table and make up an INSERT statement
	     * for each table that requires one. 
	     */
	    foreach ($dataTable as $table => $changes) {

		/* Make sure that the id column is set for each table */
		if (empty($changes[$idColumn['name']])) {
		    $changes[$idColumn['name']] = $idColumn['value'];
		}

		$table = DATABASE_TABLE_PREFIX . strtolower($table);
		$query = "INSERT INTO $table (";
		$query .= join(',', array_keys($changes));
		$query .= ') VALUES (';
		for ($i = 0; $i < sizeof($changes); $i++) {
		    if ($i > 0) {
			$query .= ', ';
		    }
		    $query .= '?';
		}
		$query .= ')';
		$data = array_values($changes);

		$recordSet = $this->_db->Execute($query, $data);
		if (!$recordSet) {
		    return ERROR | ERROR_DATABASE_FAILURE;
		}
	    }
	} else {

	    /*
	     * Iterate through the data table and make an UPDATE statement
	     * for each table that requires one. 
	     */
	    foreach ($dataTable as $table => $changes) {
		$changeList = array();
		$data = array();
		
		foreach ($changes as $key => $value) {
		    $changeList[] = " `$key` = ?";
		    $data[] = $value;
		}

		if (sizeof($changeList)) {
		    $table = DATABASE_TABLE_PREFIX . strtolower($table);
		    $query = "UPDATE $table SET";
		    $query .= join(',', $changeList);
		    $query .= " WHERE `$idColumn[name]`=?";
		    $data[] = $idColumn['value'];
		    
		    $recordSet = $this->_db->Execute($query, $data);
		    if (!$recordSet) {
			return ERROR | ERROR_DATABASE_FAILURE;
		    }
		}
	    }
	}
	
	$nucleus->clearPersistentFlag(STORAGE_FLAG_NEWLY_CREATED);
	$nucleus->clearModifyFlags();
	return SUCCESS;
    }

    /**
     * Delete the GalleryNucleus.
     *
     * @access public
     * @param object GalleryNucleus the GalleryNucleus to delete
     * @return int a status code
     */
    function deleteNucleus(&$nucleus) {
	if ($this->_connectionStatus != DATABASE_STATUS_FULLY_CONNECTED) {
	    return ERROR | ERROR_DATABASE_NOT_CONNECTED;
	}

	// XXX: implement this
	return SUCCESS;
    }

    /**
     * Create a new GalleryNucleus 
     *
     * @access public
     * @param object GalleryNucleus the GalleryNucleus to put the data in
     * @return int a status code
     */
    function newNucleus(&$nucleus) {
	if ($this->_connectionStatus != DATABASE_STATUS_FULLY_CONNECTED) {
	    return ERROR | ERROR_DATABASE_NOT_CONNECTED;
	}

	/*
	 * Get the id of the next nucleus from our sequence.
	 */
	$this->_traceStart();
	$id = $this->_db->GenId(DATABASE_ID_SEQUENCE);
	$this->_traceStop();

	$nucleus->setId($id);
	$nucleus->setSerialNumber(0);
	$nucleus->setPersistentFlag(STORAGE_FLAG_NEWLY_CREATED);
	
	return SUCCESS;
    }

    /**
     * Create and return a new GalleryLock object
     *
     * @access public
     * @param int timeout before giving up on the lock
     * @param array ids to lock (empty array means lock the world) 
     */
    function newLock($timeout, $ids=array()) {
	if ($this->_connectionStatus != DATABASE_STATUS_FULLY_CONNECTED) {
	    return ERROR | ERROR_DATABASE_NOT_CONNECTED;
	}

    }

    /**
     * Initialize the DatabaseSchema instance
     *
     * @access private
     */
    function _initDatabaseSchema() {
	if (empty($this->_databaseSchema)) {
	    require_once(dirname(__FILE__) . '/DatabaseSchema.class');
	    $this->_databaseSchema = new DatabaseSchema($this->_db, $this->_type);
	}
    }

    /**
     * Create a new schema.
     *
     * @param string the name of the database to create
     * @return int a status code
     */
    function createSchema($databaseName) {
	if ($this->_connectionStatus != DATABASE_STATUS_PARTIALLY_CONNECTED) {
	    return ERROR | ERROR_DATABASE_NOT_CONNECTED;
	}

	$this->_initDatabaseSchema();
	$this->_traceStart();
	$ret = $this->_databaseSchema->createSchema($databaseName);
	$this->_traceStop();

	return $ret;
    }

    /**
     * Bring the database schema up to date
     *
     * @return int a status code
     */
    function updateSchema() {
	if ($this->_connectionStatus != DATABASE_STATUS_FULLY_CONNECTED) {
	    return ERROR | ERROR_DATABASE_NOT_CONNECTED;
	}

	$this->_initDatabaseSchema();
	$this->_traceStart();
	$ret = $this->_databaseSchema->updateSchema();
	$this->_traceStop();

	return $ret;
    }
}
?>
