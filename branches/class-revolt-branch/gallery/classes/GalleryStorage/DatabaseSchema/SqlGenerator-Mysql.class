<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * SQL Generator for MySQL
 *
 * This class generates SQL statements that work with the MySQL database.
 *
 * @version $Id$
 * @package DatabaseSchema
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class SqlGenerator {

    function createDatabase($databaseName) {
	return "CREATE DATABASE $databaseName";
    }

    function createTable($databaseName, $tableName, $tableInfo) {
	$fullTableName = $databaseName . '.' . DATABASE_TABLE_PREFIX . $tableName;

	$clause = '';
	$primaryKey = '';

	foreach ($tableInfo as $columnName => $columnInfo) {
	    $type = $columnInfo['type'];
	    $targetTable = $columnInfo['class'];

	    /**
	     * Skip any columns that are targetted at a different table,
	     * *except* the id column, which must be in all tables.
	     */
	    if (strcasecmp($targetTable, $tableName) && !($type & STORAGE_MODIFIER_ID)) {
		continue;
	    }

	    /**
	     * If this is not the first entry in the clause, put in a separator
	     */
	    if (!empty($clause)) {
		$clause .= ', ';
	    }

	    /**
	     * Lead off with the column name, suitably escaped.
	     */
	    $clause .= "`$columnName`";

	    /**
	     * Now generate the correct type designation.
	     */
	    if ($type & STORAGE_TYPE_INTEGER) {
		$clause .= ' int(11)';
	    } else if ($type & STORAGE_TYPE_STRING) {
		if ($type & STORAGE_MODIFIER_SMALL) {
		    $size = 32;
		} else if ($type & STORAGE_MODIFIER_MEDIUM) {
		    $size = 128;
		} else {
		    $size = 255;
		}
		
		$clause .= ' varchar(' . $size . ')';
	    } else if ($type & STORAGE_TYPE_TEXT) {
		$clause .= ' text';
	    } else if ($type & STORAGE_TYPE_BOOLEAN) {
		$clause .= ' int(1)';
	    } else if ($type & STORAGE_TYPE_TIMESTAMP) {
		$clause .= ' datetime';
	    } else if ($type & STORAGE_TYPE_LIST) {
		/* can't handle this yet.  remove the column name and separator */
		print "WARNING!  ignoring LIST $columnName\n";
		$clause = substr($clause, 0, max(strlen($clause)-(4+strlen($columnName)), 0));
		continue;
	    } else if ($type & STORAGE_TYPE_MAP) {
		/* can't handle this yet.  remove the column name and separator */
		print "WARNING!  ignoring MAP $columnName\n";
		$clause = substr($clause, 0, max(strlen($clause)-(4+strlen($columnName)), 0));
		continue;
	    } else {
		/* can't handle this yet.  remove the column name and separator */
		print "ERROR!  UNKNOWN type for $columnName\n";
		$clause = substr($clause, 0, max(strlen($clause)-(4+strlen($columnName)), 0));
		continue;
	    }

	    if ($type & STORAGE_MODIFIER_REQUIRED) {
		$clause .= ' NOT NULL';
	    }

	    if ($type & STORAGE_MODIFIER_ID) {
		$primaryKey = $columnName;
	    }
	}

	if (!empty($primaryKey)) {
	    $clause .= ", PRIMARY KEY ($primaryKey)";
	}

	return "CREATE TABLE $fullTableName ($clause) Type=MyISAM";
    }
			 

}
