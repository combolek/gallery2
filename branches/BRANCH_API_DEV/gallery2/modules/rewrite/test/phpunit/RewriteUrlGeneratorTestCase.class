<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Rewrite
 * @subpackage PHPUnit
 * @author Douglas Cau <douglas@cau.se>
 */

/**
 * Global Rewrite URL Generator tests
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
class RewriteUrlGeneratorTestCase extends GalleryTestCase {


    function setUp() {
	global $gallery;
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'rewrite');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$testUrls = array(
	    'core.ShowItem' => array(
		'pattern' => 'v/%path%',
		'functions' => array(
		    'path' => array('rewrite', 'RewriteSimpleHelper', 'parsePath'))),
	    'core.DownloadItem' => array(
		'pattern' => 'd/%itemId%-%serialNumber%/%fileName%',
		'functions' => array(
		    'serialNumber' => array('rewrite', 'RewriteSimpleHelper', 'parseSerialNumber'),
		    'fileName' => array('rewrite', 'RewriteSimpleHelper', 'parseFileName'))),
	    'php.Unit' => array('pattern' => 'phpunit/'),
	    'php.Unit|test.subView' => array('pattern' => 'phpunitsub/%itemId%'),
	    'php.Unit|test.suffixExt' => array(
		'pattern' => 't/%path%.test',
		'functions' => array(
		    'path' => array('rewrite', 'RewriteSimpleHelper', 'parsePath'))),
	    'php.Unit|test.suffixPath' => array(
		'pattern' => '%path%/test.html',
		'functions' => array(
		    'path' => array('rewrite', 'RewriteSimpleHelper', 'parsePath')))
	);
	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'shortUrls',
	    serialize($testUrls));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_savedSession = $gallery->_session;
    }

    function tearDown() {
	global $gallery;
	$gallery->_session = $this->_savedSession;

	parent::tearDown();
    }

    function testGetCurrentUrl() {
	$expected = 'http://example.com/gallery2/phpunit_test.php?foo=1&bar=2';
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentUrl());
	$this->assertEquals(false, $this->_urlGenerator->_error, 'error');
    }

    function testGetCurrentUrlDir() {
	$expected = 'http://example.com/gallery2/';
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentUrlDir());
	$this->assertEquals(false, $this->_urlGenerator->_error, 'error');
    }

    function testInit() {
	$urlGeneratorName = $this->_urlGeneratorName;
	$urlGenerator = new $urlGeneratorName();
	$ret = $urlGenerator->init('phpunit_test.php');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!$urlGenerator->_error);
	$this->assertEquals(array('/gallery2/', ''), $urlGenerator->_baseUrl);
    }

    function testShortUrls() {
	global $gallery;
	$session =& $gallery->getSession();
	$urlGeneratorName = $this->_urlGeneratorName;

	/* Set embedded mode */
	$embedKey = 'G2_EMBED';
	$origEmbed = null;
	if (GalleryDataCache::containsKey($embedKey)) {
	    $origEmbed = GalleryDataCache::get($embedKey);
	}

	/* Setup.. */
	$setups = array();
	$setups[] = array('embedded' => false, 'cookiePath' => '');
	$setups[] = array('embedded' => false, 'cookiePath' => '/');
	$setups[] = array('embedded' => true, 'cookiePath' => '/');
	$setups[] = array('embedded' => true, 'cookiePath' => '');

	/* Permute cookie.path and embedded, mostly only relevant for the DownloadItem request */
	foreach ($setups as $setup) {
	    $embedded = $setup['embedded'];
	    $cookiePath = $setup['cookiePath'];

	    if ($this->_urlGeneratorName == 'ModRewriteUrlGenerator') {
		$_SERVER['REQUEST_URI'] = '/gallery2/foo/bar.jpg.html';
	    } else if ($setup['embedded']) {
		$_SERVER['REQUEST_URI'] = '/cms/phpunit_test.php';
	    } else {
		$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php';
	    }

	    /* Drive G2 into the assumed state */
	    GalleryDataCache::put($embedKey, $embedded, true);
	    $this->assertEquals($embedded, GalleryUtilities::isEmbedded(),
				'Could not change embed mode');
	    /* Change also the cookie.path */
	    $ret = GalleryCoreApi::setPluginParameter('module', 'core', 'cookie.path', $cookiePath);
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    /* Check if the correct value was stored */
	    list ($ret, $realValue) = GalleryCoreApi::getPluginParameter('module', 'core',
									 'cookie.path');
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($cookiePath, $realValue, 'Could not set the cookie path');

	    $urlGenConfigs = array();
	    if ($embedded) {
		$urlGenConfigs['standalone'] = array('embedPath' => null,
						     'relativeG2Path' => '../gallery2/');
		$urlGenConfigs['embedded1'] = array('embedPath' => '/cms/',
						    'relativeG2Path' => '../gallery2/');
		$urlGenConfigs['embedded2'] = array('embedPath' => null,
						    'relativeG2Path' => '../gallery2/');
		$urlGenConfigs['embedded3'] = array('embedPath' => '/other/',
						    'relativeG2Path' => '../gallery2/');
	    } else {
		$urlGenConfigs['standalone'] = array('embedPath' => null, 'relativeG2Path' => null);
	    }

	    foreach ($urlGenConfigs as $uGC) {

		/* Let the url generator know of the new cookie.path value */
		$this->_urlGenerator = new $urlGeneratorName();
		$ret = $this->_urlGenerator->init('phpunit_test.php', $uGC['embedPath'],
					   $uGC['relativeG2Path']);
		if ($ret) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		$gallery->setUrlGenerator($this->_urlGenerator);
		/* Let the session know of the new cookie.path value */
		$session = new GallerySession();
		$ret = $session->init();
		if ($ret) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		$gallery->_session = $session;

		$tests = $this->_getShortUrlTests();
		foreach ($tests as $test) {
		    list ($expectedUrlPath, $params, $options) = $test;
		    if (!$embedded ||
			    (!empty($params['view']) && $params['view'] == 'core.DownloadItem') ||
			    !empty($params['href']) || !empty($options['forceDirect'])) {
			$expectedUrl = '/gallery2/';
		    } elseif (empty($uGC['embedPath'])) {
			$expectedUrl = '/cms/';
		    } else {
			$expectedUrl = $uGC['embedPath'];
		    }
		    $expectedUrl .= $expectedUrlPath;

		    $expectedUrlWithSessionId = GalleryUrlGenerator::appendParamsToUrl(
			$expectedUrl,
			array($session->getKey() => $session->getId()));

		    $debugData = array();
		    foreach ($options as $op => $val) {
			$debugData[] = "option: $op => $val";
		    }
		    foreach ($params as $par => $val) {
			$debugData[] = "param: $par => $val";
		    }
		    $debugInfo = 'embedded: ' . intval($embedded) . ', cookie.path: ' .
			$cookiePath . ', embedPath: ' . $uGC['embedPath'] . ', relativeG2Path: ' .
			$uGC['relativeG2Path'] . ', ' . implode(', ', $debugData);

		    /* Session id not in the url */
		    $actualUrl = $this->_urlGenerator->generateUrl($params, 
			array('forceSessionId' => false));
		    if ((!empty($params['view']) && $params['view'] == 'core.DownloadItem') &&
			    $embedded && empty($cookiePath)) {
			/* embedded DownloadItem urls go to the G2 directly, a very special case */
			$this->assertEquals($expectedUrlWithSessionId, $actualUrl,
					    'embedded DownloadItem link without configured ' .
					    'cookie path should have an appended session id. ' .
					    $debugInfo);
		    } else {
			$this->assertEquals($expectedUrl, $actualUrl, 'Without session id. ' .
					    $debugInfo);
		    }

		    /* Session id in the url */
		    $actualUrl = $this->_urlGenerator->generateUrl($params,
			array('forceSessionId' => true));
		    $this->assertEquals($expectedUrlWithSessionId, $actualUrl, 'With session id. ' .
					$debugInfo);
		}
	    }
	}

	/* Restore */
	if ($origEmbed) {
	    GalleryDataCache::put($embedKey, $origEmbed, true);
	} else {
	    GalleryDataCache::remove($embedKey);
	    $this->assert(!GalleryDataCache::containsKey($embedKey), 'Could not remove a GDC var');
	}
    }

    function _urlGeneratorInit($urlGeneratorName) {
	$this->_urlGeneratorName = $urlGeneratorName;
	$this->_urlGenerator = new $urlGeneratorName();
	$ret = $this->_urlGenerator->init('phpunit_test.php');
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return null;
    }

    function _getShortUrlTests() {
	list ($ret, $testAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($testAlbum);
	list ($ret, $testItem) = $this->_createRandomDataItem(
	    $testAlbum->getId(),
	    'application/unknown',
	    array('pathComponent' => 'foo# bar&.dat'));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $derivative) =
	    $this->_createDerivative($testItem, $testItem->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $testAlbumPath) = $testAlbum->fetchLogicalPath();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $testItemPath) = $testItem->fetchLogicalPath();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$testItemPath = str_replace('%2F', '/', urlencode($testItemPath));

	/* array(expected path, params for generateUrl, options for generateUrl) */
	$tests = array();
	/* core.ShowItem on albums have the logical path */
	$tests[] = array('v' . $testAlbumPath,
			 array('view' => 'core.ShowItem', 'itemId' => $testAlbum->getId()),
			 array());
	/* core.ShowItem on items have the logical path, file type and .html */
	$tests[] = array('v' . $testItemPath . '.html',
			 array('view' => 'core.ShowItem', 'itemId' => $testItem->getId()),
			 array());
	/* core.ShowItem at the top level has no prefix */
	$tests[] = array('phpunit_test.php?g2_view=core.ShowItem',
			 array('view' => 'core.ShowItem'), array());
	/* %path% for non-FileSystemEntity falls back to long url */
	$tests[] = array(
	    'phpunit_test.php?g2_view=core.ShowItem&amp;g2_itemId=' . $derivative->getId(),
	    array('view' => 'core.ShowItem', 'itemId' => $derivative->getId()), array());
	/*
	 * core.DownloadItem on items have the id, serial number,
	 * path component and file type
	 */
	$tests[] = array(sprintf('d/%d-%d/%s',
				 $testItem->getId(), $testItem->getSerialNumber(),
				 urlencode($testItem->getPathComponent())),
			 array('view' => 'core.DownloadItem',
			       'itemId' => $testItem->getId()), array());
	/* php.Unit pattern withouth any keywords */
	$tests[] = array('phpunit/',
			 array('view' => 'php.Unit'), array());
	/* path rule with extension suffix */
	$tests[] = array('t' . rtrim($testAlbumPath, '/') . '.test',
			 array('view' => 'php.Unit', 'subView' => 'test.suffixExt',
			       'itemId' => $testAlbum->getId()), array());
	$tests[] = array('t' . $testItemPath . '.test',
			 array('view' => 'php.Unit', 'subView' => 'test.suffixExt',
			       'itemId' => $testItem->getId()), array());
	/* path rule with path suffix */
	$tests[] = array(ltrim($testAlbumPath, '/') . 'test.html',
			 array('view' => 'php.Unit', 'subView' => 'test.suffixPath',
			       'itemId' => $testAlbum->getId()), array());
	$tests[] = array(ltrim($testItemPath, '/') . '/test.html',
			 array('view' => 'php.Unit', 'subView' => 'test.suffixPath',
				       'itemId' => $testItem->getId()), array());
	/* href URLs should go directly to G2 */
	$tests[] = array('themes/foo/images/bar.jpg',
			 array('href' => 'themes/foo/images/bar.jpg'), array());	
	/* forceDirect should go directly to G2 */
	$tests[] = array('v' . $testAlbumPath,
			 array('view' => 'core.ShowItem', 'itemId' => $testAlbum->getId()),
			 array('forceDirect' => true));
	/* TODO: add separate href with full URL (http://) test */
	
	return $tests;
    }
}
?>
