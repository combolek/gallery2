<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * This class is a glue layer between the templating system and our various
 * callbacks that generate URLs, localized text, dates, themed widgets, etc.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryTemplateAdapter {

    /**
     * The active theme
     *
     * @var object GalleryTheme a theme instance
     * @access private
     */
    var $_theme;

    /**
     * The base path of our localized data required for translation
     *
     * @var string a directory
     */
    var $_translationBasePath;

    /**
     * The translation domain (eg modules_core)
     *
     * @var string a gettext domain
     */
    var $_translationDomain;

    /**
     * @see GalleryUrlGenerator::generateUrl()
     *
     * Return a valid Gallery URL, standalone or embedded.
     *
     * @param array data in key/value pairs
     * @return string a URL
     */
    function url($params) {
	global $gallery;
	$urlGenerator = $gallery->getUrlGenerator();
	return $urlGenerator->generateUrl($params);
    }

    /**
     * Return a valid Gallery date.
     *
     * @todo This needs to be refactored.
     *
     * @param array data in key/value pairs
     * @return string a URL
     */
    function date($params) {
	global $gallery;

	if (empty($params['format'])) {
	    $params['format'] = '%D %T';
	}
	
	return strftime($params['format'], $params['timestamp']);
    }

    /**
     * @see GalleryTranslator::translate()
     */
    function text($params) {
	global $gallery;

	$translator =& $gallery->getTranslator();
	list ($ret, $text) = $translator->translate($this->_translationDomain,
						    $this->_translationBasePath,
						    $params);
	if ($ret->isError()) {
	    return "[Translation error]";
	} else {
	    return $text;
	}
    }

    /**
     * Return a transformed element name, useful when we're trying to use
     * Javascript to access a form element.
     *
     * @param array key => value attributes
     * @return HTML content
     */
    function elementName($params) {
	return GALLERY_FORM_VARIABLE_PREFIX . $params['name'];
    }

    /**
     * Set the active theme
     *
     * @param object GalleryTheme
     */ 
    function setTheme($theme) {
	$this->_theme = $theme;
    }

    /**
     * Get the active theme
     *
     * @return object GalleryTheme
     */ 
    function getTheme() {
	return $this->_theme;
    }

    /**
     * Specify the translation base for this template
     *
     * @param componentType the type of component we're using (module, layout, theme, etc)
     * @param componentName the name of the component (core, comment, classic, etc)
     */
    function setTranslationBase($componentType, $componentName) {
	global $gallery;
	$this->_translationDomain = $componentType . '_' . $componentName;
	$this->_translationBasePath =
	    $gallery->getConfig('code.gallery.' . $componentType) .
	    $componentName;
    }

    /**
     * Return an array of the theme methods that operate on a block of text.
     *
     * @static
     * @staticvar array $_blockMethods a list of methods
     */
    function getBlockMethods() {
	static $_blockMethods = array(
				      /* Form methods */
				      'input',
				      'form',
				      'select',
				      'textarea',
				      'link',

				      /* New API Style methods */
				      'header',
				      'pathbar',
				      'pathbaritem',
				      'main',
				      'maintitle1',
				      'mainbody1',
				      'sidebar1',
				      'sidebarbox',
				      'sidebarboxtitle',
				      'sidebarboxbody',
				      'detailedbox',
				      'detailedboxtitle',
				      'detailedboxdescription',
				      'detailedboxbody',
				      'widget1',
				      'widget1set',
				      'widget1title',
				      'widget1description',
				      'widget1body',
				      'widget2',
				      'widget2set',
				      'widget2title',
				      'widget2description',
				      'widget2body',
				      'footer',

				      // New ones I added that weren't in the toolkit
				      'status',
				      'error',
				      'textmodifier1',
				      'listing',
				      'listingitem',
				      'listingselecteditem',
				      'table',
				      'row',
				      'column',
				      'columnheader',

				      /* Old API Style methods */
				      'bigFontSize',
				      'biggerFontSize',
				      'biggestFontSize',
				      'errorFontColor',
				      'heavyFrame',
				      'highlight1',
				      'highlight2',
				      'lightFrame',
				      'smallFontSize',
				      'smallerFontSize',
				      'smallestFontSize',
				      'successFontColor',
				      'thinFrame',
				      'threeDFrame',
				      'warningFontColor',
				      );
	return $_blockMethods;
    }

    /* New API methods */
    function header($params, $content) { if (isset($content)) { return $this->_theme->header($params, $content); } }
    function pathbar($params, $content) { if (isset($content)) { return $this->_theme->pathbar($params, $content); } }
    function pathbaritem($params, $content) { if (isset($content)) { return $this->_theme->pathbaritem($params, $content); } }
    function main($params, $content) { if (isset($content)) { return $this->_theme->main($params, $content); } }
    function maintitle1($params, $content) { if (isset($content)) { return $this->_theme->maintitle1($params, $content); } }
    function mainbody1($params, $content) { if (isset($content)) { return $this->_theme->mainbody1($params, $content); } }
    function sidebar1($params, $content) { if (isset($content)) { return $this->_theme->sidebar1($params, $content); } }
    function sidebarbox($params, $content) { if (isset($content)) { return $this->_theme->sidebarbox($params, $content); } }
    function sidebarboxtitle($params, $content) { if (isset($content)) { return $this->_theme->sidebarboxtitle($params, $content); } }
    function sidebarboxbody($params, $content) { if (isset($content)) { return $this->_theme->sidebarboxbody($params, $content); } }
    function listing($params, $content) { if (isset($content)) { return $this->_theme->listing($params, $content); } }
    function listingitem($params, $content) { if (isset($content)) { return $this->_theme->listingitem($params, $content); } }
    function listingselecteditem($params, $content) { if (isset($content)) { return $this->_theme->listingselecteditem($params, $content); } }
    function detailedbox($params, $content) { if (isset($content)) { return $this->_theme->detailedbox($params, $content); } }
    function detailedboxtitle($params, $content) { if (isset($content)) { return $this->_theme->detailedboxtitle($params, $content); } }
    function detailedboxdescription($params, $content) { if (isset($content)) { return $this->_theme->detailedboxdescription($params, $content); } }
    function detailedboxbody($params, $content) { if (isset($content)) { return $this->_theme->detailedboxbody($params, $content); } }
    function widget1($params, $content) { if (isset($content)) { return $this->_theme->widget1($params, $content); } }
    function widget1set($params, $content) { if (isset($content)) { return $this->_theme->widget1set($params, $content); } }
    function widget1title($params, $content) { if (isset($content)) { return $this->_theme->widget1title($params, $content); } }
    function widget1description($params, $content) { if (isset($content)) { return $this->_theme->widget1description($params, $content); } }
    function widget1body($params, $content) { if (isset($content)) { return $this->_theme->widget1body($params, $content); } }
    function widget2($params, $content) { if (isset($content)) { return $this->_theme->widget2($params, $content); } }
    function widget2set($params, $content) { if (isset($content)) { return $this->_theme->widget2set($params, $content); } }
    function widget2title($params, $content) { if (isset($content)) { return $this->_theme->widget2title($params, $content); } }
    function widget2description($params, $content) { if (isset($content)) { return $this->_theme->widget2description($params, $content); } }
    function widget2body($params, $content) { if (isset($content)) { return $this->_theme->widget2body($params, $content); } }
    function footer($params, $content) { if (isset($content)) { return $this->_theme->footer($params, $content); } }
    function status($params, $content) { if (isset($content)) { return $this->_theme->status($params, $content); } }
    function error($params, $content) { if (isset($content)) { return $this->_theme->error($params, $content); } }
    function textmodifier1($params, $content) { if (isset($content)) { return $this->_theme->textmodifier1($params, $content); } }
    function table($params, $content) { if (isset($content)) { return $this->_theme->table($params, $content); } }
    function row($params, $content) { if (isset($content)) { return $this->_theme->row($params, $content); } }
    function column($params, $content) { if (isset($content)) { return $this->_theme->column($params, $content); } }
    function columnheader($params, $content) { if (isset($content)) { return $this->_theme->columnheader($params, $content); } }

    /* block style builtins */
    function form($params, $content) { if (isset($content)) { return $this->_theme->form($params, $content); } }
    function input($params, $content) { if (isset($content)) { return $this->_theme->input($params, $content); } }
    function select($params, $content) { if (isset($content)) { return $this->_theme->select($params, $content); } }
    function textarea($params, $content) { if (isset($content)) { return $this->_theme->textarea($params, $content); } }
    function link($params, $content) { if (isset($content)) { return $this->_theme->link($params, $content); } }

    /* non-block style */
    function style($params) { return $this->_theme->style($params); }
    function thumbnail($params) { return $this->_theme->thumbnail($params); }
    
    /* ================================================== */
    /* BEGIN OLD API DELEGATION METHODS */

    /**
     * @see GalleryTheme::smallestFontSize()
     */
    function smallestFontSize($params, $content) {
	if (isset($content)) {
	    return $this->_theme->smallestFontSize($params, $content);
	}
    }

    /**
     * @see GalleryTheme::smallerFontSize()
     */
    function smallerFontSize($params, $content) {
	if (isset($content)) {
	    return $this->_theme->smallerFontSize($params, $content);
	}
    }

    /**
     * @see GalleryTheme::smallFontSize()
     */
    function smallFontSize($params, $content) {
	if (isset($content)) {
	    return $this->_theme->smallFontSize($params, $content);
	}
    }

    /**
     * @see GalleryTheme::bigFontSize()
     */
    function bigFontSize($params, $content) {
	if (isset($content)) {
	    return $this->_theme->bigFontSize($params, $content);
	}
    }

    /**
     * @see GalleryTheme::biggerFontSize()
     */
    function biggerFontSize($params, $content) {
	if (isset($content)) {
	    return $this->_theme->biggerFontSize($params, $content);
	}
    }

    /**
     * @see GalleryTheme::biggestFontSize()
     */
    function biggestFontSize($params, $content) {
	if (isset($content)) {
	    return $this->_theme->biggestFontSize($params, $content);
	}
    }

    /**
     * @see GalleryTheme::successFontColor()
     */
    function successFontColor($params, $content) {
	if (isset($content)) {
	    return $this->_theme->successFontColor($params, $content);
	}
    }

    /**
     * @see GalleryTheme::warningFontColor()
     */
    function warningFontColor($params, $content) {
	if (isset($content)) {
	    return $this->_theme->warningFontColor($params, $content);
	}
    }

    /**
     * @see GalleryTheme::errorFontColor()
     */
    function errorFontColor($params, $content) {
	if (isset($content)) {
	    return $this->_theme->errorFontColor($params, $content);
	}
    }

    /**
     * @see GalleryTheme::highlight1()
     */
    function highlight1($params, $content) {
	if (isset($content)) {
	    return $this->_theme->highlight1($params, $content);
	}
    }
    
    /**
     * @see GalleryTheme::highlight2()
     */
    function highlight2($params, $content) {
	if (isset($content)) {
	    return $this->_theme->highlight2($params, $content);
	}
    }
    
    /**
     * @see GalleryTheme::thinFrame()
     */
    function thinFrame($params, $content) {
	if (isset($content)) {
	    return $this->_theme->thinFrame($params, $content);
	}
    }

    /**
     * @see GalleryTheme::lightFrame()
     */
    function lightFrame($params, $content) {
	if (isset($content)) {
	    return $this->_theme->lightFrame($params, $content);
	}
    }

    /**
     * @see GalleryTheme::heavyFrame()
     */
    function heavyFrame($params, $content) {
	if (isset($content)) {
	    return $this->_theme->heavyFrame($params, $content);
	}
    }

    /**
     * @see GalleryTheme::threeDFrame()
     */
    function threeDFrame($params, $content) {
	if (isset($content)) {
	    return $this->_theme->threeDFrame($params, $content);
	}
    }

    /* END DELEGATION METHODS */
    /* ================================================== */
}

?>
