<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * The central seed around which all Gallery objects are formed
 *
 * This object performs all of the basic functions required in all
 * Gallery objects.
 *
 * @gallery metainfo 1.0
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryNucleus extends PersistentInfo {

    /**
     * The id of this item
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     * @gallery flag STORAGE_MODIFIER_ID
     * @gallery flag STORAGE_MODIFIER_REQUIRED
     *
     * @var int $_id
     */
    var $_id;

    /**
     * Date and time this item was created, in seconds since the epoch.
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_TIMESTAMP
     * @gallery flag STORAGE_MODIFIER_REQUIRED
     *
     * @var int $_creationTimestamp
     */
    var $_creationTimestamp;

    /**
     * Data version of this GalleryNucleus
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     * @gallery flag STORAGE_MODIFIER_REQUIRED
     *
     * @var float $_dataVersion
     */
    var $_dataVersion;

    /**
     * Date and time this item was last modified, in seconds since the epoch.
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_TIMESTAMP
     * @gallery flag STORAGE_MODIFIER_REQUIRED
     *
     * @var int $_modificationTimestamp;
     */
    var $_modificationTimestamp;

    /**
     * The id of the parent of this GalleryNucleus
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     *
     * @var int $_parentId
     */
    var $_parentId;

    /**
     * The path component of this item (eg. "image1").  This
     * value, when combined with the paths of all the parent
     * objects (say, "rootAlbum", "album01") will form the
     * complete path to the item ("rootAlbum/album01/image1").
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_SMALL
     *
     * @var string $_path
     */
    var $_path;

    /**
     * The serial number of this object in the persistent store.  This value
     * will help us to avoid collisions.
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     * @gallery flag STORAGE_MODIFIER_REQUIRED
     *
     * @var int $_serialNumber;
     */
    var $_serialNumber;

    /**
     * The actual type of this object.  This will allow the storage class to
     * correctly load this object from the database.
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_SMALL
     * @gallery flag STORAGE_MODIFIER_REQUIRED
     *
     * @var string $_objectType
     */
    var $_objectType;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     *
     * @param string the id of the object to load
     */
    function GalleryNucleus() {
	$this->PersistentInfo();
    }

    /**
     * Hook this object up to the persistent store
     *
     * Try to get this value from the cache.  If it's not in the cache, then
     * overlay this object with the data in the persistent store with the given
     * id.
     *
     * @param int the id of this object, or null to create a new one
     * @return int a status code
     */
    function load($id) {
	if (empty($id)) {
	    return ERROR | ERROR_BAD_PARAMETER;
	}

	/* See if we already have a cached instance, use it if so */
	global $gallery;
	$instance =& $gallery->getCachedNucleus($id);
	if (!empty($instance)) {
	    $this =& $instance;
	    return SUCCESS;
	}

	return $this->loadNoCache($id);
    }

    /**
     * Hook this object up to the persistent store
     *
     * Overlay this object with the data in the persistent store with the given
     * id.
     *
     * @param int the id of this object, or null to create a new one
     * @return int a status code
     */
    function loadNoCache($id) {
	/* Load the nucleus from our persistent store */
	global $gallery;
	$storage = $gallery->getStorage();
	$ret = $storage->loadNucleus($id, $this);

	/* Update the cache */
	if ($ret == SUCCESS) {
	    $gallery->addToCache($this);
	} else {
	    return $ret;
	}
    }

    /**
     * Create a new instance of this GalleryNucleus in the persistent store
     *
     * @return int a status code
     */
    function create() {
	global $gallery;

	/* Create a new instance of this nucleus in the persistent store */
	$storage =& $gallery->getStorage();
	$ret = $storage->newNucleus($this);

	/* Update the cache */
	if ($ret == SUCCESS) {
	    $gallery->addToCache($this);
	} else {
	    return $ret;
	}

	/* Set the creation time on this nucleus */
	$this->setCreationTimestamp(time());

	/* Set the object type */
	$this->setObjectType(get_class($this));
	
	return $ret;
    }
    
    /**
     * Return the full path of this item
     *
     * @access public
     * @return array int a status code, string a path
     */
    function getFullPath() {

	if (!empty($this->_parentId)) {
	    $parent = new GalleryNucleus();
	    $ret = $parent->loadNoCache($this->_parentId);
	    if ($ret & ERROR) {
		return array($ret, null);
	    }

	    list($ret, $path) = $parent->getFullPath();
	    if ($ret & ERROR) {
		return array($ret, null);
	    }
	} else {
	    global $gallery;
	    $path = $gallery->getConfigValue('core.directory.albums');
	}

	return array(SUCCESS, $path . '/' . $this->_path);
    }

    /**
     * Save the changes to this GalleryNucleus
     *
     * Save the changes to this GalleryNucleus.  
     *
     * @access public
     * @return int a status code
     */
    function save() {
	global $gallery;

	if (!$gallery->isLocked($this->_id)) {
	    return ERROR | ERROR_LOCK_REQUIRED;
	}

	if (!empty($this->_persistentInfo->modified)) {
	    /* Change the modification date */
	    $this->setModificationTimestamp(time());

	    $storage = $gallery->getStorage();
	    $ret = $storage->saveNucleus($this);
	    if ($ret == SUCCESS) {
		$gallery->addToCache($this);
	    } else {
		return $ret;
	    }
	}
	return SUCCESS;
    }

    /**
     * Refresh this item from the persistent store
     *
     * @access public
     * @return int a status code
     */
    function refresh() {
	global $gallery;
	$storage = $gallery->getStorage();
	$ret = $storage->refreshNucleus($this);
	if ($ret == SUCCESS) {
	    $gallery->addToCache($nucleus);
	} else {
	    return $ret;
	}
    }

    /**
     * Delete this GalleryNucleus
     *
     * It's only legal to delete GalleryNuclei that have already been removed
     * from the tree (ie, have no parent).  
     *
     * @access public
     * @return int a status code
     */
    function delete() {
	global $gallery;
	
	if (!$gallery->isLocked($this->_id)) {
	    return ERROR | ERROR_LOCK_REQUIRED;
	}

	$storage = $gallery->getStorage();
	return $storage->deleteNucleus($this);
    }

    /* BEGIN: Accessor Block.  DO NOT MODIFY! */
    
    /**
     * Return the meta class information about this class
     *
     * @return array member => array(type, class)
     */
    function getMetaInfo() {
        $meta = array();
        $meta['members']['path'] = array(
            'class' => 'GalleryNucleus',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_SMALL);
        $meta['members']['objectType'] = array(
            'class' => 'GalleryNucleus',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_REQUIRED | STORAGE_MODIFIER_SMALL);
        $meta['members']['modificationTimestamp'] = array(
            'class' => 'GalleryNucleus',
            'type' => STORAGE_TYPE_TIMESTAMP |
                      STORAGE_MODIFIER_REQUIRED);
        $meta['members']['serialNumber'] = array(
            'class' => 'GalleryNucleus',
            'type' => STORAGE_TYPE_INTEGER |
                      STORAGE_MODIFIER_REQUIRED);
        $meta['members']['creationTimestamp'] = array(
            'class' => 'GalleryNucleus',
            'type' => STORAGE_TYPE_TIMESTAMP |
                      STORAGE_MODIFIER_REQUIRED);
        $meta['members']['dataVersion'] = array(
            'class' => 'GalleryNucleus',
            'type' => STORAGE_TYPE_INTEGER |
                      STORAGE_MODIFIER_REQUIRED);
        $meta['members']['id'] = array(
            'class' => 'GalleryNucleus',
            'type' => STORAGE_TYPE_INTEGER |
                      STORAGE_MODIFIER_ID | STORAGE_MODIFIER_REQUIRED);
        $meta['members']['parentId'] = array(
            'class' => 'GalleryNucleus',
            'type' => STORAGE_TYPE_INTEGER);
        $meta['version'] = array('major' => 1, 'minor' => 0);
    
        return $meta;
    }
    
    /**
     * Set the value of creationTimestamp
     * 
     * @param int the new value for creationTimestamp
     * @access public
     */
    function setCreationTimestamp($value) {
        assert('isset($value)');
        $this->_creationTimestamp = $value;
        $this->setModifiedFlag('creationTimestamp', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of creationTimestamp
     * 
     * @access public
     * @return int the current value of creationTimestamp
     */
    function getCreationTimestamp() {
        return $this->_creationTimestamp;
    }
    
    /**
     * Set the value of dataVersion
     * 
     * @param int the new value for dataVersion
     * @access public
     */
    function setDataVersion($value) {
        assert('isset($value)');
        $this->_dataVersion = $value;
        $this->setModifiedFlag('dataVersion', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of dataVersion
     * 
     * @access public
     * @return int the current value of dataVersion
     */
    function getDataVersion() {
        return $this->_dataVersion;
    }
    
    /**
     * Set the value of id
     * 
     * @param int the new value for id
     * @access public
     */
    function setId($value) {
        assert('isset($value)');
        $this->_id = $value;
        $this->setModifiedFlag('id', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of id
     * 
     * @access public
     * @return int the current value of id
     */
    function getId() {
        return $this->_id;
    }
    
    /**
     * Set the value of modificationTimestamp
     * 
     * @param int the new value for modificationTimestamp
     * @access public
     */
    function setModificationTimestamp($value) {
        assert('isset($value)');
        $this->_modificationTimestamp = $value;
        $this->setModifiedFlag('modificationTimestamp', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of modificationTimestamp
     * 
     * @access public
     * @return int the current value of modificationTimestamp
     */
    function getModificationTimestamp() {
        return $this->_modificationTimestamp;
    }
    
    /**
     * Set the value of objectType
     * 
     * @param string the new value for objectType
     * @access public
     */
    function setObjectType($value) {
        assert('isset($value)');
        $this->_objectType = $value;
        $this->setModifiedFlag('objectType', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of objectType
     * 
     * @access public
     * @return string the current value of objectType
     */
    function getObjectType() {
        return $this->_objectType;
    }
    
    /**
     * Set the value of parentId
     * 
     * @param int the new value for parentId
     * @access public
     */
    function setParentId($value) {
        assert('isset($value)');
        $this->_parentId = $value;
        $this->setModifiedFlag('parentId', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of parentId
     * 
     * @access public
     * @return int the current value of parentId
     */
    function getParentId() {
        return $this->_parentId;
    }
    
    /**
     * Set the value of path
     * 
     * @param string the new value for path
     * @access public
     */
    function setPath($value) {
        assert('isset($value)');
        $this->_path = $value;
        $this->setModifiedFlag('path', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of path
     * 
     * @access public
     * @return string the current value of path
     */
    function getPath() {
        return $this->_path;
    }
    
    /**
     * Set the value of serialNumber
     * 
     * @param int the new value for serialNumber
     * @access public
     */
    function setSerialNumber($value) {
        assert('isset($value)');
        $this->_serialNumber = $value;
        $this->setModifiedFlag('serialNumber', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of serialNumber
     * 
     * @access public
     * @return int the current value of serialNumber
     */
    function getSerialNumber() {
        return $this->_serialNumber;
    }
    
    
    /* END: Accessor Block.  DO NOT MODIFY! */
}
?>
