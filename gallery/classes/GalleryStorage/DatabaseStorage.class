<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
 * Require the ADOdb libraries
 */
require_once(dirname(__FILE__) . '/adodb/adodb.inc.php');

/*
 * Constants specific to this storage class
 */
define("ID_SEQUENCE", "idSequence");

/**
 * Database implementation of the GalleryStorage interface.
 *
 * This object implements the hooks for saving and restoring objects in a
 * relational database.
 *
 * @version $Id$
 * @package GalleryStorage
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class DatabaseStorage extends GalleryStorage {

    /**
     * The type of database we're connecting to (eg 'mysql', 'postgres')
     *
     * @var string $_type
     */
    var $_type;
    
    /**
     * Prefix to prepend to any table names
     * 
     * @var string $_prefix
     */
    var $_prefix;
    
    /**
     * Name of the database user
     * 
     * @var string $_username
     */
    var $_username;
    
    /**
     * Password for the database user
     * 
     * @var string $_password
     */
    var $_password;
    
    /**
     * Name of the database to use
     * 
     * @var string $_database
     */
    var $_database;

    /**
     * Host the database runs on
     * 
     * @var string $_hostname
     */
    var $_hostname;

    /**
     * Specify the type of database using ADOdb names (eg 'mysql', 'postgres')
     *
     * @param string the database type
     */
    function setType($type) {
	$this->_type = $type;
    }

    /**
     * Specify the prefix to prepend to any table names
     *
     * @param string the prefix, like 'gallery_'
     */
    function setPrefix($prefix) {
	$this->_prefix = $prefix;
    }

    /**
     * Specify the name of the user with which to connect to the database 
     *
     * @param string username
     */
    function setUsername($username) {
	$this->_username = $username;
    }

    /**
     * Specify the database user's password
     *
     * @param string password (in clear text)
     */
    function setPassword($password) {
	$this->_password = $password;
    }

    /**
     * Specify the name of the logical database
     *
     * @param string the name of the logical database
     */
    function setDatabase($database) {
	$this->_database = $database;
    }

    /**
     * Host the database runs on 
     *
     * @param string a hostname
     */
    function setHostname($hostname) {
	$this->_hostname = $hostname;
    }

    /**
     * Connect to the database
     *
     * @return int a status code
     */
    function connect() {
	if (empty($this->_type) ||
	        empty($this->_prefix) ||
	        empty($this->_username) ||
	        empty($this->_password) ||
	        empty($this->_database) ||
	        empty($this->_hostname)) {
	    return ERROR | ERROR_MISSING_VALUE;
	}

	$this->_traceStart();
	$this->_db = ADONewConnection($this->_type);
	if (empty($this->_db)) {
	    return ERROR;
	}

	/*
	 * Turn on debugging in the database connection if Gallery is in debug
	 * mode
	 */
	global $gallery;
	if ($gallery->getDebug()) {
	    $this->_db->debug = true;
	}

	if (!$this->_db->PConnect($this->_hostname, $this->_username,
				  $this->_password, $this->_database)) {
	    $this->_db = null;
	    $this->_traceStop();
	    return ERROR | ERROR_DATABASE_FAILURE;
	}

	$this->_traceStop();
	return SUCCESS;
    }

    /**
     * Return the id of the GalleryItem associated with the path provided
     *
     * Return the id associated with the given path. Example path: 
     * "/birthdays/fred" .. this is the "fred" item in the "birthdays" 
     * item.  It doesn't really matter what types of items these are, as 
     * long as the path is legitimate.
     *
     * This method must be implemented by subclasses of Gallery.
     *
     * @access public
     * @abstract
     * @param string the path to a GalleryItem
     * @return string the id of the GalleryItem
     */
    function getIdByPath($path) {
    }

    /**
     * Load a new GalleryNucleus from storage
     *
     * @access public
     * @param string the id of the stored GalleryNucleus
     * @param object GalleryNucleus the object we're loading into
     * @return int a status code
     */
    function loadNucleus($id, &$nucleus) {

	print "<pre>";
	print_r($nucleus);
	print "</pre>";
	
	$persistentInfo = $nucleus->getPersistentInfo();
	foreach ($persistentInfo->members as $memberName => $memberInfo) {
	    print "<pre>";
	    print "$membername => ";
	    print_r($memberInfo);
	    print "</pre>";
	}
	return ERROR;
    }

    /**
     * Save the changes to the GalleryNucleus.  
     *
     * @access public
     * @param object GalleryNucleus the GalleryNucleus to save
     * @return int a status code
     */
    function saveNucleus(&$nucleus) {
	// XXX: implement this
	// XXX: check & increment serial number
	return SUCCESS;
    }

    /**
     * Delete the GalleryNucleus.
     *
     * @access public
     * @param object GalleryNucleus the GalleryNucleus to delete
     * @return int a status code
     */
    function deleteNucleus(&$nucleus) {
	// XXX: implement this
	return SUCCESS;
    }

    /**
     * Create a new GalleryNucleus 
     *
     * @access public
     * @param object GalleryNucleus the GalleryNucleus to put the data in
     * @return int a status code
     */
    function newNucleus(&$nucleus) {
	if (empty($this->_db)) {
	    return ERROR | ERROR_DATABASE_NOT_CONNECTED;
	}

	/*
	 * Get the id of the next nucleus from our sequence.
	 */
	$this->_traceStart();
	$id = $this->_db->GenId(ID_SEQUENCE);
	$this->_traceStop();

	$nucleus->setId($id);
	$nucleus->setSerialNumber(0);
	
	return SUCCESS;
    }

    /**
     * Create and return a new GalleryLock object
     *
     * @access public
     * @param int timeout before giving up on the lock
     * @param array ids to lock (empty array means lock the world) 
     */
    function newLock($timeout, $ids=array()) {
    }
}
?>
