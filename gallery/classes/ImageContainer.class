<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * A DataContainer for images
 *
 * A container for a single image.  This image may or may not be
 * cacheable (depending on whether or not it's a derivative image).
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class ImageContainer extends DataContainer {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The width this image.
     *
     * @var	int
     */
    var $_width;

    /**
     * The height this image.
     *
     * @var	int
     */
    var $_height;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     *
     * Call the superclass on the id provided.  That will create
     * either a blank object (if there's no id) or it will load the
     * appropriate object from the persistent storage.  If no id
     * was provided, initialize all private variables to their
     * default values.
     *
     * @access public
     * @param string the id of an object to be loaded
     * @param string the path to a data file to be contained
     */
    function ImageContainer($id='', $dataFileName='') {
	$this->constructor($dataFileName);
	$this->loadOrCreate($id);
    }

    /**
     * Initialize this instance
     *
     * Construct the parent, then initialize anything relevant to this
     * instance.
     *
     * @param string the id of the object to load
     */
    function constructor() {
	parent::constructor();
    }

    /**
     * Has the cache for this item current?
     *
     * Overload DataContainer::isCacheCurrent to also report on the state of
     * the height/width metadata.  For derived images, the cache is considered
     * not-current if the file doesn't exist or if the height/width metadata is
     * unknown.  For source images, the cache is considered not-current if the
     * height and width data is unset.
     * 
     * @access public
     * @return boolean true if the item is expired (ie, the cache is empty)
     */
    function isCacheCurrent() {
	// Don't forget to call the superclass also
    }

    /**
     * Return the width of the image
     *
     * Return the width of the image
     *
     * @return int the width of the image
     * @access public
     */
    function getWidth() {
    }

    /**
     * Return the height of the image
     *
     * Return the height of the image
     *
     * @return int the height of the image
     * @access public
     */
    function getHeight() {
    }
}
?>
