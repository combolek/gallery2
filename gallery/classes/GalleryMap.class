<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


/**
 * Utility storage container
 *
 * This class is a map implementation.  It is a utility class that
 * we'll use for the various data containers that we need in the
 * system.
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryMap extends PersistentInfo {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * Private storage for internal map data.
     *
     * @var array $_data
     */
    var $_data;

    /**
     * The GalleryNucleus that owns this map
     *
     * @var object GalleryNucleus $_parent
     */
    var $_parent;
	
    /**
     * The name of this member inside the parent
     *
     * @var string $_memberName;
     */
    var $_memberName;
	
    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     */
    function GalleryMap() {
	$this->PersistentInfo();
	$this->_data = array();
    }

    /**
     * Specify the parent and the name of this member in the parent
     *
     * @param object GalleryNucleus the parent
     * @param string the name of the member in the parent
     */
    function setParentInfo(&$parent, $memberName) {
	$this->_parent =& $parent;
	$this->_memberName = $memberName;
    }

    /**
     * Retrieve data from the map
     *
     * Return a value associated with the given key for the feature specified.
     * eg: getValue("core.userId").                         
     *
     * @param mixed the map key
     * @return mixed the map value
     * @access public
     */
    function getValue($key) {
	assert('!empty($key)');
	return $this->_data[$key];
    }

    /**
     * Store data in the map
     * 
     * Replace the value associated with the given key for
     * the feature specified.  eg:                        
     *       setValue("core.galleryVersion", "2.0-cvs")   
     *
     * @param mixed the map key
     * @param mixed the new map value
     * @access public
     */
    function setValue($key, $value) {
	assert('!empty($key)');
	assert('!empty($value)');

	/* Mark it as created, if it wasn't set before */
	if (!isset($this->_data[$key])) {
	    $this->setModifiedFlag($key, MEMBER_CREATED);
	}

	/* Either way, mark it as modified */
	$this->setModifiedFlag($key, MEMBER_MODIFIED);

	/* Mark this map as modified in the parent */
	if (isset($this->_parent)) {
	    $this->_parent->setModifiedFlag($this->_memberName,
					    MEMBER_MODIFIED);
	}
	
	/* Set the value */
	$this->_data[$key] = $value;
    }

    /**
     * Remove a value from the map
     * 
     * @param mixed the map key
     * @param mixed the new map value
     * @access public
     */
    function removeValue($key) {
	assert('!empty($key)');
	$this->setModifiedFlag($key, MEMBER_REMOVED);
	$this->_data[$key] = null;

	/* Mark this map as modified in the parent */
	if (isset($this->_parent)) {
	    $this->_parent->setModifiedFlag($this->_memberName,
					    MEMBER_MODIFIED);
	}
    }

    /**
     * Reset this map to a pristine state.
     */
    function reset() {
	$this->_data = array();
	$this->clearModifiedFlags();

	// XXX: should we notify the parent?
    }
}
?>
