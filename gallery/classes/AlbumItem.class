<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * A subclass of GalleryItem for containing groups of GalleryItems
 *
 * A GalleryItem that has certain extra properties relating to
 * displaying item groups and is allowed to contain other
 * GalleryItems.
 *
 * @gallery metainfo 1.0
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class AlbumItem extends GalleryItem {
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * Primary background color
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_SMALL
     *
     * @var string $_backgroundColor;
     */
    var $_backgroundColor;

    
    /**
     * Secondary background color
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_SMALL
     *
     * @var string $_backgroundColor2
     */
    var $_backgroundColor2;

    /**
     * Amount of table border
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     *
     * @var string $_border
     */
    var $_border;

    /**
     * Color of border
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_SMALL
     *
     * @var string $_borderColor
     */
    var $_borderColor;

    /**
     * Number of columns to show
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     *
     * @var int $_columns
     */
    var $_columns;

    /**
     * Show view counts for my items?
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_BOOLEAN
     *
     * @var bool $_displayViewCount
     */
    var $_displayViewCount;

    /**
     * Font name
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_SMALL
     *
     * @var string $_font
     */
    var $_font;

    /**
     * The html_footer to use for this album
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_TEXT
     *
     * @var string $_htmlFooter
     */
    var $_htmlFooter;

    /**
     * The html_header to use for this album
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_TEXT
     *
     * @var string $_htmlHeader
     */
    var $_htmlHeader;

    /**
     * The layout to use for this album
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_SMALL
     *
     * @var string $_layout
     */
    var $_layout;

    /**
     * Link color
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_SMALL
     *
     * @var string $_linkColor
     */
    var $_linkColor;

    /**
     * Allow printing?
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_BOOLEAN
     *
     * @var bool $_allowPrinting
     */
    var $_allowPrinting;

    /**
     * Target size of the intermediate image
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     *
     * @var integer $_resizeSize
     */
    var $_resizeSize;

    /**
     * Number of rows to show
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     *
     * @var int $_rows
     */
    var $_rows;

    /**
     * Whether or not to show the breadcrumb links
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_BOOLEAN
     *
     * @var boolean $_showBreadCrumb
     */
    var $_showBreadCrumb;

    /**
     * The sort direction
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     *
     * @var boolean $_sortDirection
     */
    var $_sortDirection;

    /**
     * The property we're sorting on 
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     *
     * @var boolean $_sortProperty
     */
    var $_sortProperty;

    /**
     * Text color
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_SMALL
     *
     * @var string $_textColor
     */
    var $_textColor;

    /**
     * Target size of thumbnails inside this album
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_INTEGER
     *
     * @var integer $_thumbSize
     */
    var $_thumbSize;

    /**
     * Allow user to view extended data?
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_BOOLEAN
     *
     * @var bool $_viewExtendedData
     */
    var $_viewExtendedData;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */
	
    /**
     * Constructor
     *
     * Create a new blank instance, and register any members that need to
     * persist in our storage.
     *
     * @access public
     */
    function AlbumItem() {
	$this->GalleryItem();
    }

    /**
     * Create a new instance of this AlbumItem in the persistent store
     *
     * Also create the album directory on the filesystem
     *
     * @return int a status code
     */
    function create($parentId, $albumName) {
	if (empty($albumName)) {
	    return ERROR | ERROR_BAD_PARAMETER;
	}

	global $gallery;
	$platform = $gallery->getPlatform();

	if (empty($parentId)) {
	    $parentPath = $gallery->getConfigValue('core.directory.albums');
	} else {
	    $parent = new GalleryNucleus();
	    $ret = $parent->load($parentId);
	    if ($ret & ERROR) {
		return $ret;
	    }
	    
	    list($ret, $parentPath) = $parent->getFullPath();
	    if ($ret & ERROR) {
		return $ret;
	    }
	}
	
	/* Create a new directory for this album */
	$albumDir = $parentPath . '/' . $albumName;

	if (!@$platform->mkdir($albumDir,
	        $gallery->getConfigValue('core.permissions.directory'))) {

	    return ERROR | ERROR_NAME_COLLISION;
	}

	/* Let our parent take care of creation in the persistent store */
	$ret = parent::create();
	if ($ret == SUCCESS) {

	    /* Set our path component */
	    $this->setPath($albumName);
	} else {

	    /* We had an error .. clean up the directory */
	    $platform->unlink($albumDir);
	}
	
	return $ret;
    }

    /**
     * Create a new root level album 
     *
     * Also create the album directory on the filesystem
     *
     * @return int a status code
     */
    function createRoot($albumName) {
	return $this->create(null, $albumName);
    }

    /**
     * Delete this AlbumItem
     *
     * Delete all children and then remove the directory
     *
     * @access public
     * @return int a status code
     */
    function delete() {

	/* Lots of stuff needs to be written for this to work */

	/* Iterate through all children and delete them */
	$this->getChildIds();

	/* Get my path */
	list($ret, $path) = $this->getFullPath();
	if ($ret & ERROR) {
	    return $ret;
	}

	/* Delete my record */
	$ret = parent::delete();
	if ($ret & ERROR) {
	    return $ret;
	}

	/* Remove my directory */ 
    }

    /**
     * Can this item contain other items?
     *
     * AlbumItems are allowed to contain other GalleryItems
     *
     * @access public
     * @return boolean true if the item can contain children
     */
    function canHaveChildren() {
	return true;
    }

    /**
     * Change the path component of this item of this item
     *
     * Overload GalleryNucleus' setPath so that when we change the path of an
     * AlbumItem we also rename the underlying directory.
     *
     * @access public
     * @param string the path component
     * @return boolean false if the path already exists, true otherwise
     */
    function setPath($newname) {
	// rename dir here
	parent::setPath($newname);
    }

    /**
     * Set this as a root album
     *
     * Attempt to take over maintaining the top of the album tree.  Check the
     * top album to see if it's got an item id associated with it.  If not,
     * then associate this AlbumItem's id with it and we become the root.
     *
     * @access public
     * @return int a status code
     */
    function becomeTheRootAlbum() {
	// XXX this require more thought.
    }

    /**
     * Is this album the root album?
     * 
     * @return bool true if yes, false if no
     */
    function isRoot() {
	global $gallery;
	return ($this->getId() == $gallery->getRootAlbumItemId());
    }
    
    /* BEGIN: Accessor Block.  DO NOT MODIFY! */
    
    /**
     * Return the meta class information about this class
     *
     * @return array member => array(type, class)
     */
    function getMetaInfo() {
        $meta = parent::getMetaInfo();
        $meta['members']['font'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_SMALL);
        $meta['members']['backgroundColor2'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_SMALL);
        $meta['members']['rows'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_INTEGER);
        $meta['members']['htmlFooter'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_TEXT);
        $meta['members']['sortProperty'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_INTEGER);
        $meta['members']['columns'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_INTEGER);
        $meta['members']['resizeSize'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_INTEGER);
        $meta['members']['backgroundColor'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_SMALL);
        $meta['members']['layout'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_SMALL);
        $meta['members']['sortDirection'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_INTEGER);
        $meta['members']['htmlHeader'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_TEXT);
        $meta['members']['linkColor'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_SMALL);
        $meta['members']['allowPrinting'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_BOOLEAN);
        $meta['members']['textColor'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_SMALL);
        $meta['members']['border'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_INTEGER);
        $meta['members']['thumbSize'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_INTEGER);
        $meta['members']['viewExtendedData'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_BOOLEAN);
        $meta['members']['showBreadCrumb'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_BOOLEAN);
        $meta['members']['displayViewCount'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_BOOLEAN);
        $meta['members']['borderColor'] = array(
            'class' => 'AlbumItem',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_SMALL);
        $meta['version'] = array('major' => 1, 'minor' => 0);
    
        return $meta;
    }
    
    /**
     * Set the value of allowPrinting
     * 
     * @param bool the new value for allowPrinting
     * @access public
     */
    function setAllowPrinting($value) {
        assert('isset($value)');
        $this->_allowPrinting = $value;
        $this->setModifiedFlag('allowPrinting', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of allowPrinting
     * 
     * @access public
     * @return bool the current value of allowPrinting
     */
    function getAllowPrinting() {
        return $this->_allowPrinting;
    }
    
    /**
     * Set the value of backgroundColor
     * 
     * @param string the new value for backgroundColor
     * @access public
     */
    function setBackgroundColor($value) {
        assert('isset($value)');
        $this->_backgroundColor = $value;
        $this->setModifiedFlag('backgroundColor', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of backgroundColor
     * 
     * @access public
     * @return string the current value of backgroundColor
     */
    function getBackgroundColor() {
        return $this->_backgroundColor;
    }
    
    /**
     * Set the value of backgroundColor2
     * 
     * @param string the new value for backgroundColor2
     * @access public
     */
    function setBackgroundColor2($value) {
        assert('isset($value)');
        $this->_backgroundColor2 = $value;
        $this->setModifiedFlag('backgroundColor2', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of backgroundColor2
     * 
     * @access public
     * @return string the current value of backgroundColor2
     */
    function getBackgroundColor2() {
        return $this->_backgroundColor2;
    }
    
    /**
     * Set the value of border
     * 
     * @param int the new value for border
     * @access public
     */
    function setBorder($value) {
        assert('isset($value)');
        $this->_border = $value;
        $this->setModifiedFlag('border', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of border
     * 
     * @access public
     * @return int the current value of border
     */
    function getBorder() {
        return $this->_border;
    }
    
    /**
     * Set the value of borderColor
     * 
     * @param string the new value for borderColor
     * @access public
     */
    function setBorderColor($value) {
        assert('isset($value)');
        $this->_borderColor = $value;
        $this->setModifiedFlag('borderColor', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of borderColor
     * 
     * @access public
     * @return string the current value of borderColor
     */
    function getBorderColor() {
        return $this->_borderColor;
    }
    
    /**
     * Set the value of columns
     * 
     * @param int the new value for columns
     * @access public
     */
    function setColumns($value) {
        assert('isset($value)');
        $this->_columns = $value;
        $this->setModifiedFlag('columns', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of columns
     * 
     * @access public
     * @return int the current value of columns
     */
    function getColumns() {
        return $this->_columns;
    }
    
    /**
     * Set the value of displayViewCount
     * 
     * @param bool the new value for displayViewCount
     * @access public
     */
    function setDisplayViewCount($value) {
        assert('isset($value)');
        $this->_displayViewCount = $value;
        $this->setModifiedFlag('displayViewCount', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of displayViewCount
     * 
     * @access public
     * @return bool the current value of displayViewCount
     */
    function getDisplayViewCount() {
        return $this->_displayViewCount;
    }
    
    /**
     * Set the value of font
     * 
     * @param string the new value for font
     * @access public
     */
    function setFont($value) {
        assert('isset($value)');
        $this->_font = $value;
        $this->setModifiedFlag('font', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of font
     * 
     * @access public
     * @return string the current value of font
     */
    function getFont() {
        return $this->_font;
    }
    
    /**
     * Set the value of htmlFooter
     * 
     * @param string the new value for htmlFooter
     * @access public
     */
    function setHtmlFooter($value) {
        assert('isset($value)');
        $this->_htmlFooter = $value;
        $this->setModifiedFlag('htmlFooter', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of htmlFooter
     * 
     * @access public
     * @return string the current value of htmlFooter
     */
    function getHtmlFooter() {
        return $this->_htmlFooter;
    }
    
    /**
     * Set the value of htmlHeader
     * 
     * @param string the new value for htmlHeader
     * @access public
     */
    function setHtmlHeader($value) {
        assert('isset($value)');
        $this->_htmlHeader = $value;
        $this->setModifiedFlag('htmlHeader', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of htmlHeader
     * 
     * @access public
     * @return string the current value of htmlHeader
     */
    function getHtmlHeader() {
        return $this->_htmlHeader;
    }
    
    /**
     * Set the value of layout
     * 
     * @param string the new value for layout
     * @access public
     */
    function setLayout($value) {
        assert('isset($value)');
        $this->_layout = $value;
        $this->setModifiedFlag('layout', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of layout
     * 
     * @access public
     * @return string the current value of layout
     */
    function getLayout() {
        return $this->_layout;
    }
    
    /**
     * Set the value of linkColor
     * 
     * @param string the new value for linkColor
     * @access public
     */
    function setLinkColor($value) {
        assert('isset($value)');
        $this->_linkColor = $value;
        $this->setModifiedFlag('linkColor', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of linkColor
     * 
     * @access public
     * @return string the current value of linkColor
     */
    function getLinkColor() {
        return $this->_linkColor;
    }
    
    /**
     * Set the value of resizeSize
     * 
     * @param int the new value for resizeSize
     * @access public
     */
    function setResizeSize($value) {
        assert('isset($value)');
        $this->_resizeSize = $value;
        $this->setModifiedFlag('resizeSize', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of resizeSize
     * 
     * @access public
     * @return int the current value of resizeSize
     */
    function getResizeSize() {
        return $this->_resizeSize;
    }
    
    /**
     * Set the value of rows
     * 
     * @param int the new value for rows
     * @access public
     */
    function setRows($value) {
        assert('isset($value)');
        $this->_rows = $value;
        $this->setModifiedFlag('rows', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of rows
     * 
     * @access public
     * @return int the current value of rows
     */
    function getRows() {
        return $this->_rows;
    }
    
    /**
     * Set the value of showBreadCrumb
     * 
     * @param bool the new value for showBreadCrumb
     * @access public
     */
    function setShowBreadCrumb($value) {
        assert('isset($value)');
        $this->_showBreadCrumb = $value;
        $this->setModifiedFlag('showBreadCrumb', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of showBreadCrumb
     * 
     * @access public
     * @return bool the current value of showBreadCrumb
     */
    function getShowBreadCrumb() {
        return $this->_showBreadCrumb;
    }
    
    /**
     * Set the value of sortDirection
     * 
     * @param int the new value for sortDirection
     * @access public
     */
    function setSortDirection($value) {
        assert('isset($value)');
        $this->_sortDirection = $value;
        $this->setModifiedFlag('sortDirection', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of sortDirection
     * 
     * @access public
     * @return int the current value of sortDirection
     */
    function getSortDirection() {
        return $this->_sortDirection;
    }
    
    /**
     * Set the value of sortProperty
     * 
     * @param int the new value for sortProperty
     * @access public
     */
    function setSortProperty($value) {
        assert('isset($value)');
        $this->_sortProperty = $value;
        $this->setModifiedFlag('sortProperty', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of sortProperty
     * 
     * @access public
     * @return int the current value of sortProperty
     */
    function getSortProperty() {
        return $this->_sortProperty;
    }
    
    /**
     * Set the value of textColor
     * 
     * @param string the new value for textColor
     * @access public
     */
    function setTextColor($value) {
        assert('isset($value)');
        $this->_textColor = $value;
        $this->setModifiedFlag('textColor', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of textColor
     * 
     * @access public
     * @return string the current value of textColor
     */
    function getTextColor() {
        return $this->_textColor;
    }
    
    /**
     * Set the value of thumbSize
     * 
     * @param int the new value for thumbSize
     * @access public
     */
    function setThumbSize($value) {
        assert('isset($value)');
        $this->_thumbSize = $value;
        $this->setModifiedFlag('thumbSize', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of thumbSize
     * 
     * @access public
     * @return int the current value of thumbSize
     */
    function getThumbSize() {
        return $this->_thumbSize;
    }
    
    /**
     * Set the value of viewExtendedData
     * 
     * @param bool the new value for viewExtendedData
     * @access public
     */
    function setViewExtendedData($value) {
        assert('isset($value)');
        $this->_viewExtendedData = $value;
        $this->setModifiedFlag('viewExtendedData', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of viewExtendedData
     * 
     * @access public
     * @return bool the current value of viewExtendedData
     */
    function getViewExtendedData() {
        return $this->_viewExtendedData;
    }
    
    
    /* END: Accessor Block.  DO NOT MODIFY! */
}
?>
